{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"application-development/docker/","text":"Deploy with Docker containers Containers provides a consistent environment across different machines and operating systems. The effect is similar to that of virtual machines, but more lightweight and efficient. With Docker containers you can: deploy easily to desktop, servers or in the cloud. package software and its dependencies in a standardised way. test your application in an environment similar to that in which it will be deployed. have your users obtain your software and its dependencies, ready to run, with a single command. deploy your application to the cloud and scale it easily with systems such as kubernetes to meet demand as needed. Read the docker website to learn more about Docker containers and images. Dyalog provides pre-made containers for: The Dyalog Interpreter The Jarvis web service framework Dyalog Jupyter Notebooks Including support for interactive debugging using the Remote IDE . docker run -e RIDE_INIT = serve:*:4502 -p 4502 :4502 dyalog/dyalog Access from RIDE in a web browser: docker run - e RIDE_INIT = http : * : 8888 - p 8888 : 8888 dyalog / dyalog #videos { display: flex; text-align: center; } Dyalog 20: Dyalog's Docker Containers (slides PDF) Dyalog Webinars: Microservices in Dyalog APL","title":"Deploy with Docker containers"},{"location":"application-development/docker/#deploy-with-docker-containers","text":"Containers provides a consistent environment across different machines and operating systems. The effect is similar to that of virtual machines, but more lightweight and efficient. With Docker containers you can: deploy easily to desktop, servers or in the cloud. package software and its dependencies in a standardised way. test your application in an environment similar to that in which it will be deployed. have your users obtain your software and its dependencies, ready to run, with a single command. deploy your application to the cloud and scale it easily with systems such as kubernetes to meet demand as needed. Read the docker website to learn more about Docker containers and images. Dyalog provides pre-made containers for: The Dyalog Interpreter The Jarvis web service framework Dyalog Jupyter Notebooks Including support for interactive debugging using the Remote IDE . docker run -e RIDE_INIT = serve:*:4502 -p 4502 :4502 dyalog/dyalog Access from RIDE in a web browser: docker run - e RIDE_INIT = http : * : 8888 - p 8888 : 8888 dyalog / dyalog #videos { display: flex; text-align: center; } Dyalog 20: Dyalog's Docker Containers (slides PDF) Dyalog Webinars: Microservices in Dyalog APL","title":"Deploy with Docker containers"},{"location":"development-environment/","text":"Development Environment Dyalog provides two integrated development environments (IDEs). There is the Dyalog IDE for Microsoft Windows, and the Remote IDE ( RIDE ). The RIDE can be used on all platforms, but is the only GUI available for Linux and macOS. As the name suggests, the RIDE also provides remote interaction and debugging capabilities over a network. Microsoft Windows macOS Dyalog for Docker Linux .deb (Debian/Ubuntu) Linux .rpm (Fedora/openSUSE) Raspberry Pi (32-bit Debian/Raspbian) ChromeOS (64-bit Intel) .flex { display: flex; align-items: center; justify-content: space-around; padding: 0 1rem 0 1rem; } .flex-item { text-align: center; }","title":"Development Environment"},{"location":"development-environment/#development-environment","text":"Dyalog provides two integrated development environments (IDEs). There is the Dyalog IDE for Microsoft Windows, and the Remote IDE ( RIDE ). The RIDE can be used on all platforms, but is the only GUI available for Linux and macOS. As the name suggests, the RIDE also provides remote interaction and debugging capabilities over a network. Microsoft Windows macOS Dyalog for Docker Linux .deb (Debian/Ubuntu) Linux .rpm (Fedora/openSUSE) Raspberry Pi (32-bit Debian/Raspbian) ChromeOS (64-bit Intel) .flex { display: flex; align-items: center; justify-content: space-around; padding: 0 1rem 0 1rem; } .flex-item { text-align: center; }","title":"Development Environment"},{"location":"development-environment/install/","text":"Installation Dyalog provides installation packages for popular operating systems which can be downloaded for free . Microsoft Windows This is a quick overview of the installation process. Full installation instructions are in the file setup_readme.htm included in the install package windows_64_<version>_unicode.zip which can be downloaded from the Dyalog website . For more information about installed components, registry entries and configuration etc. see the Dyalog for Microsoft Windows Installation and Configuration Guide . Go to the download page and download the installation package windows_64_<version>_unicode.zip . Unzip the installation package and double click on setup.exe . Restart the installer with administrator privileges . Choose your APL keyboard. The default APL keyboard uses Ctrl as the APL shifting key. It does not prevent copy and paste shortcuts, but some prefer to use a different method. If you do not want to use the Ctrl key as your APL shifting key, untick \u2611 Install the Dyalog APL IME for 64 bit Windows and head over to the section on typing APL for alternatives. Info Once Dyalog is installed, you can use \u229e Win + Spacebar to cycle between available keyboard layouts. Click on Default Install . Reboot your PC. Dyalog should now be available in your Start menu. macOS This is a quick overview of the installation process. For more information, see the Dyalog for macOS Installation and Configuration Guide . Download and Install Dyalog Go to the download page and download the installation package for macOS. Double click on the mac_64_<version>_unicode.pkg file. Follow the instructions in the Dyalog Installer window. Close the Dyalog Installer window. Dyalog should now be installed in your Applications folder. Info Dyalog for macOS comes with the Remote Integrated Development Environment . The [Dyalog for macOS Installation and Configuration Guide] contains some of the same information as the RIDE User Guide but with some parts specific to macOS. Choose your APL keyboard. Keyboard layouts and fonts for macOS are described on the dfns website . TODO grab from existing fonts and keyboards page? Or maybe this is only relevant for Windows? But a link from here? Linux This is a quick overview of the installation process. For more information, see the Dyalog for UNIX Installation and Configuration Guide . Note Dyalog for Linux comes with a text-based TTY interface. We recommend installing the RIDE graphical interface as well. Distribution Installation package Debian/Ubuntu 64-bit .deb Fedora/openSUSE 64-bit .rpm Download and Install Dyalog Installation .rpm (Fedora/openSUSE) and .deb (Debian/Ubuntu) files are provided from the Dyalog website . Use your distribution's package manager to install Dyalog. Usually, you can install from the terminal: sudo rpm -i linux_64_<version>_unicode.x86_64.rpm sudo dpkg -i linux_64_<version>_unicode.x86_64.deb Choose your APL keyboard With the increasing prevalence of Wayland, there are some known issues with typing on recent versions of Fedora and Ubuntu. By default, Dyalog uses the Meta (\"Windows\" \u229e Win ) key for entering APL symbols on Linux. Dyalog will override XKB configuration at startup by default. You can prevent this with a startup option. dyalog -nokbd APL keyboard layouts come with most Linux distributions by default, but must be enabled. Follow the instructions on the APL Wiki for your desktop environment. Install the RIDE While Dyalog does come with a bare-bones terminal interface, it is recommended to use the Remote IDE . Download the latest release from GitHub and install it as above. Create an APL session startup script By default, users must \"start\" an APL session from the main RIDE configuration window as described in section 2.1.1 of Mastering Dyalog APL . The following script can be used to launch RIDE and immediately connect to a new Dyalog instance. #!/usr/bin/env sh env RIDE_CONNECT=localhost:4502 ride & dyalog +s -q RIDE_INIT=SERVE:*:4502 To prevent Dyalog taking over the keyboard layout at startup, add -nokbd to the 3rd line in the script. Dyalog installation directory The main Dyalog installation directory is returned by the expression: \u2395 \u2190 2 \u2395NQ # 'GetEnvironment' 'DYALOG' C : \\ Program Files \\ Dyalog \\ Dyalog APL - 64 18.2 Unicode Raspberry Pi First you will need to set your Raspberry Pi up to connect to our public repository, This will allow you to keep your APL installation up to date with new releases. The following are the supported Operating System codenames for 32-bit Dyalog APL: Raspbian (Debian) buster or later (ARMHF) - Hardware Float: this is required for Dyalog 18.0 and later jessie or later (ARMHF) - Hardware Float: this is required for Dyalog 17.1 Note We do not support ARMEL (Software Float) as we consider the performance of software float to be unacceptable on the Raspberry Pi. Dyalog APL will not run on 64-bit Raspbian O/S. wget -O - http://packages.dyalog.com/dyalog-apt-key.gpg.key | sudo apt-key add - CODENAME = $( lsb_release -sc ) echo \"deb http://packages.dyalog.com ${ CODENAME } main\" | sudo tee /etc/apt/sources.list.d/dyalog.list Note If you update the operating system on your Pi, then you should re-run these last two commands so that /etc/apt/sources.list.d/dyalog.list accurately reflects the codename of the version of the distribution that you are running. See packages.dyalog.com for more information and about previous versions of Dyalog and RIDE. Chromebook ChromeOS is not officially supported by Dyalog, but some users have reported success installing the .deb installation package on Intel Chromebooks. There is a forum post with more information.","title":"Installation"},{"location":"development-environment/install/#installation","text":"Dyalog provides installation packages for popular operating systems which can be downloaded for free .","title":"Installation"},{"location":"development-environment/install/#microsoft-windows","text":"This is a quick overview of the installation process. Full installation instructions are in the file setup_readme.htm included in the install package windows_64_<version>_unicode.zip which can be downloaded from the Dyalog website . For more information about installed components, registry entries and configuration etc. see the Dyalog for Microsoft Windows Installation and Configuration Guide . Go to the download page and download the installation package windows_64_<version>_unicode.zip . Unzip the installation package and double click on setup.exe . Restart the installer with administrator privileges . Choose your APL keyboard. The default APL keyboard uses Ctrl as the APL shifting key. It does not prevent copy and paste shortcuts, but some prefer to use a different method. If you do not want to use the Ctrl key as your APL shifting key, untick \u2611 Install the Dyalog APL IME for 64 bit Windows and head over to the section on typing APL for alternatives. Info Once Dyalog is installed, you can use \u229e Win + Spacebar to cycle between available keyboard layouts. Click on Default Install . Reboot your PC. Dyalog should now be available in your Start menu.","title":"Microsoft Windows"},{"location":"development-environment/install/#macos","text":"This is a quick overview of the installation process. For more information, see the Dyalog for macOS Installation and Configuration Guide .","title":"macOS"},{"location":"development-environment/install/#download-and-install-dyalog","text":"Go to the download page and download the installation package for macOS. Double click on the mac_64_<version>_unicode.pkg file. Follow the instructions in the Dyalog Installer window. Close the Dyalog Installer window. Dyalog should now be installed in your Applications folder. Info Dyalog for macOS comes with the Remote Integrated Development Environment . The [Dyalog for macOS Installation and Configuration Guide] contains some of the same information as the RIDE User Guide but with some parts specific to macOS.","title":"Download and Install Dyalog"},{"location":"development-environment/install/#choose-your-apl-keyboard","text":"Keyboard layouts and fonts for macOS are described on the dfns website . TODO grab from existing fonts and keyboards page? Or maybe this is only relevant for Windows? But a link from here?","title":"Choose your APL keyboard."},{"location":"development-environment/install/#linux","text":"This is a quick overview of the installation process. For more information, see the Dyalog for UNIX Installation and Configuration Guide . Note Dyalog for Linux comes with a text-based TTY interface. We recommend installing the RIDE graphical interface as well. Distribution Installation package Debian/Ubuntu 64-bit .deb Fedora/openSUSE 64-bit .rpm","title":"Linux"},{"location":"development-environment/install/#download-and-install-dyalog_1","text":"Installation .rpm (Fedora/openSUSE) and .deb (Debian/Ubuntu) files are provided from the Dyalog website . Use your distribution's package manager to install Dyalog. Usually, you can install from the terminal: sudo rpm -i linux_64_<version>_unicode.x86_64.rpm sudo dpkg -i linux_64_<version>_unicode.x86_64.deb","title":"Download and Install Dyalog"},{"location":"development-environment/install/#choose-your-apl-keyboard_1","text":"With the increasing prevalence of Wayland, there are some known issues with typing on recent versions of Fedora and Ubuntu. By default, Dyalog uses the Meta (\"Windows\" \u229e Win ) key for entering APL symbols on Linux. Dyalog will override XKB configuration at startup by default. You can prevent this with a startup option. dyalog -nokbd APL keyboard layouts come with most Linux distributions by default, but must be enabled. Follow the instructions on the APL Wiki for your desktop environment.","title":"Choose your APL keyboard"},{"location":"development-environment/install/#install-the-ride","text":"While Dyalog does come with a bare-bones terminal interface, it is recommended to use the Remote IDE . Download the latest release from GitHub and install it as above.","title":"Install the RIDE"},{"location":"development-environment/install/#create-an-apl-session-startup-script","text":"By default, users must \"start\" an APL session from the main RIDE configuration window as described in section 2.1.1 of Mastering Dyalog APL . The following script can be used to launch RIDE and immediately connect to a new Dyalog instance. #!/usr/bin/env sh env RIDE_CONNECT=localhost:4502 ride & dyalog +s -q RIDE_INIT=SERVE:*:4502 To prevent Dyalog taking over the keyboard layout at startup, add -nokbd to the 3rd line in the script.","title":"Create an APL session startup script"},{"location":"development-environment/install/#dyalog-installation-directory","text":"The main Dyalog installation directory is returned by the expression: \u2395 \u2190 2 \u2395NQ # 'GetEnvironment' 'DYALOG' C : \\ Program Files \\ Dyalog \\ Dyalog APL - 64 18.2 Unicode","title":"Dyalog installation directory"},{"location":"development-environment/install/#raspberry-pi","text":"First you will need to set your Raspberry Pi up to connect to our public repository, This will allow you to keep your APL installation up to date with new releases. The following are the supported Operating System codenames for 32-bit Dyalog APL: Raspbian (Debian) buster or later (ARMHF) - Hardware Float: this is required for Dyalog 18.0 and later jessie or later (ARMHF) - Hardware Float: this is required for Dyalog 17.1 Note We do not support ARMEL (Software Float) as we consider the performance of software float to be unacceptable on the Raspberry Pi. Dyalog APL will not run on 64-bit Raspbian O/S. wget -O - http://packages.dyalog.com/dyalog-apt-key.gpg.key | sudo apt-key add - CODENAME = $( lsb_release -sc ) echo \"deb http://packages.dyalog.com ${ CODENAME } main\" | sudo tee /etc/apt/sources.list.d/dyalog.list Note If you update the operating system on your Pi, then you should re-run these last two commands so that /etc/apt/sources.list.d/dyalog.list accurately reflects the codename of the version of the distribution that you are running. See packages.dyalog.com for more information and about previous versions of Dyalog and RIDE.","title":"Raspberry Pi"},{"location":"development-environment/install/#chromebook","text":"ChromeOS is not officially supported by Dyalog, but some users have reported success installing the .deb installation package on Intel Chromebooks. There is a forum post with more information.","title":"Chromebook"},{"location":"development-environment/typing/","text":"Typing APL Symbols Dyalog APL's standard US English layout is as follows: \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502~ \u233a \u2502! \u2336 \u2502@ \u236b \u2502# \u2352 \u2502$ \u234b \u2502% \u233d \u2502^ \u2349 \u2502& \u2296 \u2502* \u235f \u2502( \u2371 \u2502) \u2372 \u2502_ ! \u2502+ \u2339 \u2502Backspace\u2502 \u2502` \u22c4 \u25021 \u00a8 \u25022 \u00af \u25023 < \u25024 \u2264 \u25025 = \u25026 \u2265 \u25027 > \u25028 \u2260 \u25029 \u2228 \u25020 \u2227 \u2502- \u00d7 \u2502= \u00f7 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Tab \u2502Q \u2502W \u2502E \u2377 \u2502R \u2502T \u2368 \u2502Y \u2502U \u2502I \u2378 \u2502O \u2365 \u2502P \u2363 \u2502{ \u235e \u2502} \u236c \u2502| \u22a3 \u2502 \u2502 \u2502q ? \u2502w \u2375 \u2502e \u220a \u2502r \u2374 \u2502t ~ \u2502y \u2191 \u2502u \u2193 \u2502i \u2373 \u2502o \u25cb \u2502p * \u2502[ \u2190 \u2502] \u2192 \u2502\\ \u22a2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Caps \u2502A \u2502S \u2502D \u2502F \u2502G \u2502H \u2502J \u2364 \u2502K \u2338 \u2502L \u2337 \u2502: \u2261 \u2502\" \u2262 \u2502Enter \u2502 \u2502Lock \u2502a \u237a \u2502s \u2308 \u2502d \u230a \u2502f _ \u2502g \u2207 \u2502h \u2206 \u2502j \u2218 \u2502k ' \u2502l \u2395 \u2502; \u234e \u2502' \u2355 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Shift \u2502Z \u2286 \u2502X \u2502C \u2502V \u2502B \u2502N \u2502M \u2502 < \u236a \u2502> \u2359 \u2502? \u2360 \u2502Shift \u2502 \u2502 \u2502z \u2282 \u2502x \u2283 \u2502c \u2229 \u2502v \u222a \u2502b \u22a5 \u2502n \u22a4 \u2502m | \u2502, \u235d \u2502. \u2340 \u2502/ \u233f \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Several international keyboard layouts exist with charts available from the dfns website . By platform Microsoft Windows If you select \"Install the Dyalog APL IME for 64 bit Windows\" during installation , you will have an additional keyboard input method with the ability to type APL symbols by holding the Ctrl key. In Windows 10, you can use \u229e Win + Space to choose between available keyboard layouts. Note (May 2022) If you are using Microsoft Windows 11, then you might find that the standard Dyalog IME does not work with UWP (Universal Windows Platform) applications such as Notepad. We are working on both immediate and long-term solutions to meet our customers' wide range of needs. By default, Dyalog's Input Method Editor (IME) uses Ctrl to enter APL symbols. If you would like an alternative input method, such as using the AltGr shifting key or backtick ` prefix similar to tryapl , see section 2.2.5 of Mastering Dyalog APL . Linux (including Raspberry Pi) and macOS See the APL Wiki page about Typing Glyphs on Linux . macOS See the APL Wiki section about Typing Glyphs on macOS . By method Troubleshooting Cannot type APL symbols in RIDE on Linux","title":"Typing APL Symbols"},{"location":"development-environment/typing/#typing-apl-symbols","text":"Dyalog APL's standard US English layout is as follows: \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502~ \u233a \u2502! \u2336 \u2502@ \u236b \u2502# \u2352 \u2502$ \u234b \u2502% \u233d \u2502^ \u2349 \u2502& \u2296 \u2502* \u235f \u2502( \u2371 \u2502) \u2372 \u2502_ ! \u2502+ \u2339 \u2502Backspace\u2502 \u2502` \u22c4 \u25021 \u00a8 \u25022 \u00af \u25023 < \u25024 \u2264 \u25025 = \u25026 \u2265 \u25027 > \u25028 \u2260 \u25029 \u2228 \u25020 \u2227 \u2502- \u00d7 \u2502= \u00f7 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Tab \u2502Q \u2502W \u2502E \u2377 \u2502R \u2502T \u2368 \u2502Y \u2502U \u2502I \u2378 \u2502O \u2365 \u2502P \u2363 \u2502{ \u235e \u2502} \u236c \u2502| \u22a3 \u2502 \u2502 \u2502q ? \u2502w \u2375 \u2502e \u220a \u2502r \u2374 \u2502t ~ \u2502y \u2191 \u2502u \u2193 \u2502i \u2373 \u2502o \u25cb \u2502p * \u2502[ \u2190 \u2502] \u2192 \u2502\\ \u22a2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Caps \u2502A \u2502S \u2502D \u2502F \u2502G \u2502H \u2502J \u2364 \u2502K \u2338 \u2502L \u2337 \u2502: \u2261 \u2502\" \u2262 \u2502Enter \u2502 \u2502Lock \u2502a \u237a \u2502s \u2308 \u2502d \u230a \u2502f _ \u2502g \u2207 \u2502h \u2206 \u2502j \u2218 \u2502k ' \u2502l \u2395 \u2502; \u234e \u2502' \u2355 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Shift \u2502Z \u2286 \u2502X \u2502C \u2502V \u2502B \u2502N \u2502M \u2502 < \u236a \u2502> \u2359 \u2502? \u2360 \u2502Shift \u2502 \u2502 \u2502z \u2282 \u2502x \u2283 \u2502c \u2229 \u2502v \u222a \u2502b \u22a5 \u2502n \u22a4 \u2502m | \u2502, \u235d \u2502. \u2340 \u2502/ \u233f \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Several international keyboard layouts exist with charts available from the dfns website .","title":"Typing APL Symbols"},{"location":"development-environment/typing/#by-platform","text":"","title":"By platform"},{"location":"development-environment/typing/#microsoft-windows","text":"If you select \"Install the Dyalog APL IME for 64 bit Windows\" during installation , you will have an additional keyboard input method with the ability to type APL symbols by holding the Ctrl key. In Windows 10, you can use \u229e Win + Space to choose between available keyboard layouts. Note (May 2022) If you are using Microsoft Windows 11, then you might find that the standard Dyalog IME does not work with UWP (Universal Windows Platform) applications such as Notepad. We are working on both immediate and long-term solutions to meet our customers' wide range of needs. By default, Dyalog's Input Method Editor (IME) uses Ctrl to enter APL symbols. If you would like an alternative input method, such as using the AltGr shifting key or backtick ` prefix similar to tryapl , see section 2.2.5 of Mastering Dyalog APL .","title":"Microsoft Windows"},{"location":"development-environment/typing/#linux-including-raspberry-pi-and-macos","text":"See the APL Wiki page about Typing Glyphs on Linux .","title":"Linux (including Raspberry Pi) and macOS"},{"location":"development-environment/typing/#macos","text":"See the APL Wiki section about Typing Glyphs on macOS .","title":"macOS"},{"location":"development-environment/typing/#by-method","text":"","title":"By method"},{"location":"development-environment/typing/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"development-environment/typing/#cannot-type-apl-symbols-in-ride-on-linux","text":"","title":"Cannot type APL symbols in RIDE on Linux"},{"location":"language/","text":"Getting started with APL You do not need to install anything to get started using and learning the APL language. You can get started with the materials listed here using the TryAPL online interpreter . New to programming The book Mastering Dyalog APL by Bernard Legrand is aimed at new developers and is suitable for people with no prior programming experience. However, it is also a fairly comprehensive guide to the many aspects of both the APL language and the Dyalog development environments, and so intermediate and advanced users will still find it valuable. The book was originally published in 2009, and although it is being re-worked as an e-book to include chapters on recent features, the original is still available as a physical book . New to APL If you are already familiar with a programming language or two, the book Learning APL by Stefan Kruger offers an excellent introduction to modern APL for experienced programmers. Guided problem sets Our APL Course (work in progress) is a set of guided problem sets with examples and explained solutions. It aims to cover the majority of language constructs and is broader in scope than Learning APL , but not as comprehensive as Mastering Dyalog APL .","title":"Getting started with APL"},{"location":"language/#getting-started-with-apl","text":"You do not need to install anything to get started using and learning the APL language. You can get started with the materials listed here using the TryAPL online interpreter .","title":"Getting started with APL"},{"location":"language/#new-to-programming","text":"The book Mastering Dyalog APL by Bernard Legrand is aimed at new developers and is suitable for people with no prior programming experience. However, it is also a fairly comprehensive guide to the many aspects of both the APL language and the Dyalog development environments, and so intermediate and advanced users will still find it valuable. The book was originally published in 2009, and although it is being re-worked as an e-book to include chapters on recent features, the original is still available as a physical book .","title":"New to programming"},{"location":"language/#new-to-apl","text":"If you are already familiar with a programming language or two, the book Learning APL by Stefan Kruger offers an excellent introduction to modern APL for experienced programmers.","title":"New to APL"},{"location":"language/#guided-problem-sets","text":"Our APL Course (work in progress) is a set of guided problem sets with examples and explained solutions. It aims to cover the majority of language constructs and is broader in scope than Learning APL , but not as comprehensive as Mastering Dyalog APL .","title":"Guided problem sets"},{"location":"language/examples/","text":"Quick and dirty examples See more on the APL Wiki . Monte carlo simulation Estimate Pi with 10,000 pairs of random numbers: Try it now! { 4 \u00d7 ( + \u233f \u00f7\u2262 ) 1 > 0.5 * \u2368 + / 2 * \u2368 ? \u2375 2 \u2374 0 0 } 10000 3.1456 Regex like you've never seen Convert what you say into what your dog Rex hears: Try it now! Rex \u2190 'rex' '\\w' \u2395R '\\0' '*' \u2360 1 Rex 'Rex, I told you not to do that! Now, Rex, go and wait outside' Rex , * **** *** *** ** ** ****! ***, Rex , ** *** **** ******* Swap two substrings: Try it now! 'ab' 'ra' \u2395R 'ra' 'ab' \u22a2 'abracadabra' raabcadraab A powerful date time converter: Try it now! now \u2190 1613552859 \u235d Unix Timestamp \u235d 1200\u2336 is experimental 'Dddd Doo Mmmm YYYY hh:mm' ( 1200 \u2336 ) 20 1 \u2395DT now \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Wednesday 17 th February 2021 09 : 07 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Quick and dirty examples"},{"location":"language/examples/#quick-and-dirty-examples","text":"See more on the APL Wiki . Monte carlo simulation Estimate Pi with 10,000 pairs of random numbers: Try it now! { 4 \u00d7 ( + \u233f \u00f7\u2262 ) 1 > 0.5 * \u2368 + / 2 * \u2368 ? \u2375 2 \u2374 0 0 } 10000 3.1456 Regex like you've never seen Convert what you say into what your dog Rex hears: Try it now! Rex \u2190 'rex' '\\w' \u2395R '\\0' '*' \u2360 1 Rex 'Rex, I told you not to do that! Now, Rex, go and wait outside' Rex , * **** *** *** ** ** ****! ***, Rex , ** *** **** ******* Swap two substrings: Try it now! 'ab' 'ra' \u2395R 'ra' 'ab' \u22a2 'abracadabra' raabcadraab A powerful date time converter: Try it now! now \u2190 1613552859 \u235d Unix Timestamp \u235d 1200\u2336 is experimental 'Dddd Doo Mmmm YYYY hh:mm' ( 1200 \u2336 ) 20 1 \u2395DT now \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Wednesday 17 th February 2021 09 : 07 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Quick and dirty examples"},{"location":"language/paradigms/","text":"Programming Pardigms A programming paradigm is a style or method of programming characterised by the main features or constructs used. This page describes and compares the paradigms available in Dyalog. It is not an academic or authoratative classification of paradigms. Array-oriented This is one ingredient in the secret sauce of APL. In the most trivial sense, basic APL operations can be compared to SQL statements. names _ ages \u235d A list of names stacked on top of a list of corresponding ages \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Alice \u2502 Bob \u2502 Charlie \u2502 David \u2502 Ellie \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 22 \u2502 5 \u2502 26 \u2502 30 \u2502 12 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 names \u233f\u2368 ages > 15 \u235d Select names where age is greater than 15 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Alice \u2502 Charlie \u2502 David \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 How does this work? Operations work on whole arrays in a consistent manner, so we can compare two numbers as easily as many: 22 > 15 \u235d 1 for yes, 0 for no 1 ages > 15 \u235d This is a list of Booleans 1 0 1 1 0 The function replicate ( \u237a/\u2375 ), when used with Booleans (1s and 0s), is called compress . Here we are using compress-first ( \u237a\u233f\u2375 ) to be more consistent with leading axis theory . 1 0 1 1 0 \u233f 'ABCDE' ACD Dyalog allows you to mix and match the other styles of programming to fit your use case. Procedural Traditional APL code often has this flavour. This is probably most relatable to people who have a traditional computer science background, and learned a language like C or Python . In procedural programming, you decompose a problem into the smallest steps that you know how to express to the computer, and then you tell the computer do this then do this then do this other thing . It is easily compared to a cooking recipe: add flour , add water , mix together to make a dough , fry the dumplings . \u2207 grps RaiseBy pcnt [ 1 ] salaries [ \u2378 groups \u220a grps ] \u00d7 \u2190 1 + pcnt \u00f7 100 \u2207 Object-oriented In this model, all of the key entities are objects . These are not physical objects like a table or a book, but they are conceptually like objects. You can define a class of object, like a dog or a bird . You can then define some properties and methods for objects of that class, like dogs have legs and birds have wings. Dogs go woof while birds go tweet . You can then define classes which use others as a base. So you can define Class Instance Property Method Dog Golden Retriever Legs Woof Dog Cocker Spaniel Legs Woof Bird Parakeet Wings Tweet Bird Sparrow Wings Tweet See our guide on Object Oriented Programming for APL Programmers . Or if you haven't the time, Object Oriented Programming for Impatient APL Programmers . Functional In APL terminology, a function is a thing with 3=\u2395NC nameclass 3 . What is Functional Programming? John Scholes and Roger Hui at the Dyalog '11 User Meeting In contrast to our procedural examplel above , pure functional programming would insist that our functions have no side effects. Raise \u2190 { \u235d \u237a: (groups)(salaries) \u235d \u2375: (groups to raise)(percentage) \u235d \u2190: salaries of groups raised by percentage ( g s ) \u2190 \u237a ( r p ) \u2190 \u2375 ( 1 + p \u00f7 100 ) \u00d7 @ ( \u2378 g \u220a r ) \u22a2 s } Often times, the array-oriented approach and the functional approach yield similar encodings of the same solution. One key difference between functional programming and array-oriented programming is that while functional programming focuses on the composition of pure functions. This contrast is exemplified by two ways to write code which takes the first four words in a text vector. In a functional approach, we define functions which perform each step of Split character vector into a nested vector of character vectors . Take the first four words Join our list of four words into a single, non-nested character vector. SplitWords \u2190 ' ' \u2218 ( \u2260\u2286\u22a2 ) Take4 \u2190 4 \u2218 \u2191 Join \u2190 1 \u2218 \u2193 \u2364 \u220a ' ' \u2218 , \u00a8 Join Take4 SplitWords 'here are four words and here are five more' here are four words In the traditional APL approach, the main focus is on the transformation of data from one stage to the next. text \u2190 'here are four words and here are five more' ' ' = text 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 + \\ ' ' = text 0 0 0 0 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 7 7 7 7 7 8 8 8 8 8 4 >+ \\ ' ' = text 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 text \u233f\u2368 4 >+ \\ ' ' = text here are four words The advantage in the functional case is that the functions we create should be useful for solving other problems as well. The advantage in the array-oriented case is that not only are we making the best use of the core primitive functions and operators, but we are use flat arrays . Using flat arrays Using the core primitives From step to step, each transformation can be used for a different purpose.","title":"Programming Pardigms"},{"location":"language/paradigms/#programming-pardigms","text":"A programming paradigm is a style or method of programming characterised by the main features or constructs used. This page describes and compares the paradigms available in Dyalog. It is not an academic or authoratative classification of paradigms.","title":"Programming Pardigms"},{"location":"language/paradigms/#array-oriented","text":"This is one ingredient in the secret sauce of APL. In the most trivial sense, basic APL operations can be compared to SQL statements. names _ ages \u235d A list of names stacked on top of a list of corresponding ages \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Alice \u2502 Bob \u2502 Charlie \u2502 David \u2502 Ellie \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 22 \u2502 5 \u2502 26 \u2502 30 \u2502 12 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 names \u233f\u2368 ages > 15 \u235d Select names where age is greater than 15 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Alice \u2502 Charlie \u2502 David \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 How does this work? Operations work on whole arrays in a consistent manner, so we can compare two numbers as easily as many: 22 > 15 \u235d 1 for yes, 0 for no 1 ages > 15 \u235d This is a list of Booleans 1 0 1 1 0 The function replicate ( \u237a/\u2375 ), when used with Booleans (1s and 0s), is called compress . Here we are using compress-first ( \u237a\u233f\u2375 ) to be more consistent with leading axis theory . 1 0 1 1 0 \u233f 'ABCDE' ACD Dyalog allows you to mix and match the other styles of programming to fit your use case.","title":"Array-oriented"},{"location":"language/paradigms/#procedural","text":"Traditional APL code often has this flavour. This is probably most relatable to people who have a traditional computer science background, and learned a language like C or Python . In procedural programming, you decompose a problem into the smallest steps that you know how to express to the computer, and then you tell the computer do this then do this then do this other thing . It is easily compared to a cooking recipe: add flour , add water , mix together to make a dough , fry the dumplings . \u2207 grps RaiseBy pcnt [ 1 ] salaries [ \u2378 groups \u220a grps ] \u00d7 \u2190 1 + pcnt \u00f7 100 \u2207","title":"Procedural"},{"location":"language/paradigms/#object-oriented","text":"In this model, all of the key entities are objects . These are not physical objects like a table or a book, but they are conceptually like objects. You can define a class of object, like a dog or a bird . You can then define some properties and methods for objects of that class, like dogs have legs and birds have wings. Dogs go woof while birds go tweet . You can then define classes which use others as a base. So you can define Class Instance Property Method Dog Golden Retriever Legs Woof Dog Cocker Spaniel Legs Woof Bird Parakeet Wings Tweet Bird Sparrow Wings Tweet See our guide on Object Oriented Programming for APL Programmers . Or if you haven't the time, Object Oriented Programming for Impatient APL Programmers .","title":"Object-oriented"},{"location":"language/paradigms/#functional","text":"In APL terminology, a function is a thing with 3=\u2395NC nameclass 3 . What is Functional Programming? John Scholes and Roger Hui at the Dyalog '11 User Meeting In contrast to our procedural examplel above , pure functional programming would insist that our functions have no side effects. Raise \u2190 { \u235d \u237a: (groups)(salaries) \u235d \u2375: (groups to raise)(percentage) \u235d \u2190: salaries of groups raised by percentage ( g s ) \u2190 \u237a ( r p ) \u2190 \u2375 ( 1 + p \u00f7 100 ) \u00d7 @ ( \u2378 g \u220a r ) \u22a2 s } Often times, the array-oriented approach and the functional approach yield similar encodings of the same solution. One key difference between functional programming and array-oriented programming is that while functional programming focuses on the composition of pure functions. This contrast is exemplified by two ways to write code which takes the first four words in a text vector. In a functional approach, we define functions which perform each step of Split character vector into a nested vector of character vectors . Take the first four words Join our list of four words into a single, non-nested character vector. SplitWords \u2190 ' ' \u2218 ( \u2260\u2286\u22a2 ) Take4 \u2190 4 \u2218 \u2191 Join \u2190 1 \u2218 \u2193 \u2364 \u220a ' ' \u2218 , \u00a8 Join Take4 SplitWords 'here are four words and here are five more' here are four words In the traditional APL approach, the main focus is on the transformation of data from one stage to the next. text \u2190 'here are four words and here are five more' ' ' = text 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 + \\ ' ' = text 0 0 0 0 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 7 7 7 7 7 8 8 8 8 8 4 >+ \\ ' ' = text 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 text \u233f\u2368 4 >+ \\ ' ' = text here are four words The advantage in the functional case is that the functions we create should be useful for solving other problems as well. The advantage in the array-oriented case is that not only are we making the best use of the core primitive functions and operators, but we are use flat arrays . Using flat arrays Using the core primitives From step to step, each transformation can be used for a different purpose.","title":"Functional"}]}