{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"application-development/","text":"Tools and Interfaces Development tools Tool Description Documentation Windows IDE Write, run and debug Dyalog applications on Microsoft Windows Dyalog for Microsoft Windows UI Guide RIDE The recommended IDE for macOS and Linux. Remotely connect to an interpreter over a network on any platform RIDE User Guide Link Save APL source in text files to integrate with source code management software Link User Guide Docker Run Dyalog and deploy applications using Docker containers Dyalog on Docker Process management and deployment Tool Description Documentation APLProcess Launch and manage processes from within APL aplservice.dws Template for running a Dyalog application as a Microsoft Windows service Futures and Isolates Execute code in parallel CPU threads Web communications Tool Description Documentation Jarvis Expose APL functions as a JSON or REST web services HttpCommand Make HTTP requests to access web data and services HttpUtils Conga FtpClient aplssh SAWS File handling and data processing Tool Description Documentation loaddata.dws SQAPL Interface to ODBC data sources (SQL databases) vecdb \u2395CSV Read data from CSV files and text as APL arrays; write APL arrays to CSV format and files \u2395JSON Convert between APL namespaces and JSON representation text \u2395XML .NET OLE \u2395MAP External language interfaces and standard libraries Tool Description Documentation \u2395NA Interface to compiled libraries (.dll, .so, .dylib, .a) RSConnect Math Py'n'APL .NET GUI and graphics Tool Description Documentation DUI EasyGUI Chart Wizard Graph Plotting Library Selenium APL system migration Tool Description Documentation Workspace Transfer APLX","title":"Tools and Interfaces"},{"location":"application-development/#tools-and-interfaces","text":"","title":"Tools and Interfaces"},{"location":"application-development/#development-tools","text":"Tool Description Documentation Windows IDE Write, run and debug Dyalog applications on Microsoft Windows Dyalog for Microsoft Windows UI Guide RIDE The recommended IDE for macOS and Linux. Remotely connect to an interpreter over a network on any platform RIDE User Guide Link Save APL source in text files to integrate with source code management software Link User Guide Docker Run Dyalog and deploy applications using Docker containers Dyalog on Docker","title":"Development tools"},{"location":"application-development/#process-management-and-deployment","text":"Tool Description Documentation APLProcess Launch and manage processes from within APL aplservice.dws Template for running a Dyalog application as a Microsoft Windows service Futures and Isolates Execute code in parallel CPU threads","title":"Process management and deployment"},{"location":"application-development/#web-communications","text":"Tool Description Documentation Jarvis Expose APL functions as a JSON or REST web services HttpCommand Make HTTP requests to access web data and services HttpUtils Conga FtpClient aplssh SAWS","title":"Web communications"},{"location":"application-development/#file-handling-and-data-processing","text":"Tool Description Documentation loaddata.dws SQAPL Interface to ODBC data sources (SQL databases) vecdb \u2395CSV Read data from CSV files and text as APL arrays; write APL arrays to CSV format and files \u2395JSON Convert between APL namespaces and JSON representation text \u2395XML .NET OLE \u2395MAP","title":"File handling and data processing"},{"location":"application-development/#external-language-interfaces-and-standard-libraries","text":"Tool Description Documentation \u2395NA Interface to compiled libraries (.dll, .so, .dylib, .a) RSConnect Math Py'n'APL .NET","title":"External language interfaces and standard libraries"},{"location":"application-development/#gui-and-graphics","text":"Tool Description Documentation DUI EasyGUI Chart Wizard Graph Plotting Library Selenium","title":"GUI and graphics"},{"location":"application-development/#apl-system-migration","text":"Tool Description Documentation Workspace Transfer APLX","title":"APL system migration"},{"location":"application-development/application-development/","text":"Application Development Dyalog's Integrated Development Environments allow you to interactively use APL to develop and debug applications. On all platforms, Dyalog includes an Integrated Development Environment (IDE) to enable the interactive use of the APL notation to explore data, discover algorithms and create solutions. Using the IDE, the user can create an application through experimentation and easily diagnose problems, resolve issues and resume work. The IDE provides editors for functions and classes, and a tracer which allows the setting of break points, watch points, and full edit-and-resume capabilities. The advanced user can enhance the IDE through User Commands. As part of the standard offering, Dyalog provides user commands that can, for example, interface to external source code management systems and search, replace and refactor code in the active workspace or in external code; you can further extend the IDE by implementing your own user commands. Remote IDE (RIDE) The RIDE is a cross-platform, graphical development environment capable of producing a rich user experience on a variety of platforms. It can be run on macOS, Linux and Microsoft Windows, and can be used from any one of these platforms as a front end for Dyalog versions from 14.1 onwards. The RIDE and connected Dyalog engines do not need to be running on the same device, the same type of device or even on the same continent. From Dyalog version 17.0, the RIDE does not even need to be installed on client machines; if it is installed on the machine where the interpreter is running, then the interpreter can be configured to act as a web server and provide remote debugging or interaction through any compatible web browser. RIDE User Guide RIDE project on GitHub Dyalog IDE for Microsoft Windows The RIDE is now the recommended IDE for macOS, AIX and Linux users. However, our native Microsoft Windows development environment remains the richest environment for the development of APL applications. Over the years, the Windows IDE has taken advantage of the Windows GUI to provide a Workspace Explorer, integrated search and replace tools, a language bar, tools for debugging GUI applications, an editor for nested arrays and integrated charting of data. Until the RIDE catches up, the classical Windows IDE is expected to remain the tool of choice for pure Windows development. Text-based (TTY) IDE The original interface to Dyalog is a UNIX (or VT-100) style terminal session. Despite only having a fixed-size screen full of characters, this interface does provide all of the interactive functionality mentioned in the introduction. We will continue to provide this interface for use in situations where no GUI is available or where developers prefer the retro look! Deploy with Docker containers Containers provides a consistent environment across different machines and operating systems. The effect is similar to that of virtual machines, but more lightweight and efficient. With Docker containers you can: deploy easily to desktop, servers or in the cloud. package software and its dependencies in a standardised way. test your application in an environment similar to that in which it will be deployed. have your users obtain your software and its dependencies, ready to run, with a single command. deploy your application to the cloud and scale it easily with systems such as kubernetes to meet demand as needed. Read the docker website to learn more about Docker containers and images. Dyalog provides pre-made containers for: The Dyalog Interpreter The Jarvis web service framework Dyalog Jupyter Notebooks Including support for interactive debugging using the Remote IDE . docker run -e RIDE_INIT = serve:*:4502 -p 4502 :4502 dyalog/dyalog Access from RIDE in a web browser: docker run - e RIDE_INIT = http : * : 8888 - p 8888 : 8888 dyalog / dyalog #videos { display: flex; text-align: center; } Dyalog 20: Dyalog's Docker Containers (slides PDF) Dyalog Webinars: Microservices in Dyalog APL","title":"Application Development"},{"location":"application-development/application-development/#application-development","text":"Dyalog's Integrated Development Environments allow you to interactively use APL to develop and debug applications. On all platforms, Dyalog includes an Integrated Development Environment (IDE) to enable the interactive use of the APL notation to explore data, discover algorithms and create solutions. Using the IDE, the user can create an application through experimentation and easily diagnose problems, resolve issues and resume work. The IDE provides editors for functions and classes, and a tracer which allows the setting of break points, watch points, and full edit-and-resume capabilities. The advanced user can enhance the IDE through User Commands. As part of the standard offering, Dyalog provides user commands that can, for example, interface to external source code management systems and search, replace and refactor code in the active workspace or in external code; you can further extend the IDE by implementing your own user commands.","title":"Application Development"},{"location":"application-development/application-development/#remote-ide-ride","text":"The RIDE is a cross-platform, graphical development environment capable of producing a rich user experience on a variety of platforms. It can be run on macOS, Linux and Microsoft Windows, and can be used from any one of these platforms as a front end for Dyalog versions from 14.1 onwards. The RIDE and connected Dyalog engines do not need to be running on the same device, the same type of device or even on the same continent. From Dyalog version 17.0, the RIDE does not even need to be installed on client machines; if it is installed on the machine where the interpreter is running, then the interpreter can be configured to act as a web server and provide remote debugging or interaction through any compatible web browser. RIDE User Guide RIDE project on GitHub","title":"Remote IDE (RIDE)"},{"location":"application-development/application-development/#dyalog-ide-for-microsoft-windows","text":"The RIDE is now the recommended IDE for macOS, AIX and Linux users. However, our native Microsoft Windows development environment remains the richest environment for the development of APL applications. Over the years, the Windows IDE has taken advantage of the Windows GUI to provide a Workspace Explorer, integrated search and replace tools, a language bar, tools for debugging GUI applications, an editor for nested arrays and integrated charting of data. Until the RIDE catches up, the classical Windows IDE is expected to remain the tool of choice for pure Windows development.","title":"Dyalog IDE for Microsoft Windows"},{"location":"application-development/application-development/#text-based-tty-ide","text":"The original interface to Dyalog is a UNIX (or VT-100) style terminal session. Despite only having a fixed-size screen full of characters, this interface does provide all of the interactive functionality mentioned in the introduction. We will continue to provide this interface for use in situations where no GUI is available or where developers prefer the retro look!","title":"Text-based (TTY) IDE"},{"location":"application-development/application-development/#deploy-with-docker-containers","text":"Containers provides a consistent environment across different machines and operating systems. The effect is similar to that of virtual machines, but more lightweight and efficient. With Docker containers you can: deploy easily to desktop, servers or in the cloud. package software and its dependencies in a standardised way. test your application in an environment similar to that in which it will be deployed. have your users obtain your software and its dependencies, ready to run, with a single command. deploy your application to the cloud and scale it easily with systems such as kubernetes to meet demand as needed. Read the docker website to learn more about Docker containers and images. Dyalog provides pre-made containers for: The Dyalog Interpreter The Jarvis web service framework Dyalog Jupyter Notebooks Including support for interactive debugging using the Remote IDE . docker run -e RIDE_INIT = serve:*:4502 -p 4502 :4502 dyalog/dyalog Access from RIDE in a web browser: docker run - e RIDE_INIT = http : * : 8888 - p 8888 : 8888 dyalog / dyalog #videos { display: flex; text-align: center; } Dyalog 20: Dyalog's Docker Containers (slides PDF) Dyalog Webinars: Microservices in Dyalog APL","title":"Deploy with Docker containers"},{"location":"application-development/docker/","text":"Deploy with Docker containers Containers provides a consistent environment across different machines and operating systems. The effect is similar to that of virtual machines, but more lightweight and efficient. With Docker containers you can: deploy easily to desktop, servers or in the cloud. package software and its dependencies in a standardised way. test your application in an environment similar to that in which it will be deployed. have your users obtain your software and its dependencies, ready to run, with a single command. deploy your application to the cloud and scale it easily with systems such as kubernetes to meet demand as needed. Read the docker website to learn more about Docker containers and images. Dyalog provides pre-made containers for: The Dyalog Interpreter The Jarvis web service framework Dyalog Jupyter Notebooks Including support for interactive debugging using the Remote IDE . docker run -e RIDE_INIT = serve:*:4502 -p 4502 :4502 dyalog/dyalog Access from RIDE in a web browser: docker run - e RIDE_INIT = http : * : 8888 - p 8888 : 8888 dyalog / dyalog #videos { display: flex; text-align: center; } Dyalog 20: Dyalog's Docker Containers (slides PDF) Dyalog Webinars: Microservices in Dyalog APL","title":"Deploy with Docker containers"},{"location":"application-development/docker/#deploy-with-docker-containers","text":"Containers provides a consistent environment across different machines and operating systems. The effect is similar to that of virtual machines, but more lightweight and efficient. With Docker containers you can: deploy easily to desktop, servers or in the cloud. package software and its dependencies in a standardised way. test your application in an environment similar to that in which it will be deployed. have your users obtain your software and its dependencies, ready to run, with a single command. deploy your application to the cloud and scale it easily with systems such as kubernetes to meet demand as needed. Read the docker website to learn more about Docker containers and images. Dyalog provides pre-made containers for: The Dyalog Interpreter The Jarvis web service framework Dyalog Jupyter Notebooks Including support for interactive debugging using the Remote IDE . docker run -e RIDE_INIT = serve:*:4502 -p 4502 :4502 dyalog/dyalog Access from RIDE in a web browser: docker run - e RIDE_INIT = http : * : 8888 - p 8888 : 8888 dyalog / dyalog #videos { display: flex; text-align: center; } Dyalog 20: Dyalog's Docker Containers (slides PDF) Dyalog Webinars: Microservices in Dyalog APL","title":"Deploy with Docker containers"},{"location":"application-development/external-language-interfaces-standard-libraries/","text":"External Language Interfaces and Standard Libraries Compiled libraries interface The Name Association function \u2395NA provides access from APL to compiled functions within a library. Online documentation for Name Association \u2395NA A library is implemented according to the operating system as follows: a Dynamic Link Library (DLL) under Windows a Shared Library (.so or .dylib) under Linux and macOS a static library (.a) under AIX A compiled library is a collection of functions typically written in C (or C++) each of which may take arguments and return a result. Input and output data types must be explicitly declared. .NET .NET contains a plethora of useful libraries. To use .NET functions and namespaces, set \u2395USING and create an instance of a .NET class with \u2395NEW . \u2395USING \u2190 'System' mydt \u2190 \u2395NEW DateTime ( 2008 4 30 ) TimeZone . CurrentTimeZone . StandardName GMT Standard Time Py'n'APL python \u27f7 APL bridge RSConnect Microsoft Office \u27f7 Dyalog bridge OLE is a Microsoft technology which can be used to interface with Microsoft Office products, including Excel, PowerPoint and Word. The Dyalog OLE bridge is only on Microsoft Windows. Here is a quick example to open a connection to Excel, create a workbook and add data to it. XL \u2190 \u2395NEW 'OLEClient' ( \u2282 'ClassName' 'Excel.Application' ) XL . Visible \u2190 1 XL . Workbooks . Add \u236c XL . ActiveWorkbook . Sheets [ 1 ] . Name Sheet1 XL . ActiveWorkbook . Sheets [ 1 ] . Range [ \u2282 'A1:A5' ] . Value2 \u2190 \u236a\u2373 5 XL . ActiveWorkbook . Sheets [ \u2282 'Sheet1' ] . Range [ \u2282 'B1:B5' ] . Value2 \u2190 \u236a, \u00a8 'ABCDE' For further information and examples, see: Chapter Q, Section 2 on page 676 of Mastering Dyalog APL Dyalog Webinar: APL and Microsoft Excel Chapter 9 of the Dyalog for Microsoft Windows Interface Guide Charting the APL/Excel Waters","title":"External Language Interfaces and Standard Libraries"},{"location":"application-development/external-language-interfaces-standard-libraries/#external-language-interfaces-and-standard-libraries","text":"","title":"External Language Interfaces and Standard Libraries"},{"location":"application-development/external-language-interfaces-standard-libraries/#compiled-libraries-interface","text":"The Name Association function \u2395NA provides access from APL to compiled functions within a library. Online documentation for Name Association \u2395NA A library is implemented according to the operating system as follows: a Dynamic Link Library (DLL) under Windows a Shared Library (.so or .dylib) under Linux and macOS a static library (.a) under AIX A compiled library is a collection of functions typically written in C (or C++) each of which may take arguments and return a result. Input and output data types must be explicitly declared.","title":"Compiled libraries interface"},{"location":"application-development/external-language-interfaces-standard-libraries/#net","text":".NET contains a plethora of useful libraries. To use .NET functions and namespaces, set \u2395USING and create an instance of a .NET class with \u2395NEW . \u2395USING \u2190 'System' mydt \u2190 \u2395NEW DateTime ( 2008 4 30 ) TimeZone . CurrentTimeZone . StandardName GMT Standard Time","title":".NET"},{"location":"application-development/external-language-interfaces-standard-libraries/#pynapl-python-apl-bridge","text":"","title":"Py'n'APL python \u27f7 APL bridge"},{"location":"application-development/external-language-interfaces-standard-libraries/#rsconnect","text":"","title":"RSConnect"},{"location":"application-development/external-language-interfaces-standard-libraries/#microsoft-office-dyalog-bridge","text":"OLE is a Microsoft technology which can be used to interface with Microsoft Office products, including Excel, PowerPoint and Word. The Dyalog OLE bridge is only on Microsoft Windows. Here is a quick example to open a connection to Excel, create a workbook and add data to it. XL \u2190 \u2395NEW 'OLEClient' ( \u2282 'ClassName' 'Excel.Application' ) XL . Visible \u2190 1 XL . Workbooks . Add \u236c XL . ActiveWorkbook . Sheets [ 1 ] . Name Sheet1 XL . ActiveWorkbook . Sheets [ 1 ] . Range [ \u2282 'A1:A5' ] . Value2 \u2190 \u236a\u2373 5 XL . ActiveWorkbook . Sheets [ \u2282 'Sheet1' ] . Range [ \u2282 'B1:B5' ] . Value2 \u2190 \u236a, \u00a8 'ABCDE' For further information and examples, see: Chapter Q, Section 2 on page 676 of Mastering Dyalog APL Dyalog Webinar: APL and Microsoft Excel Chapter 9 of the Dyalog for Microsoft Windows Interface Guide Charting the APL/Excel Waters","title":"Microsoft Office \u27f7 Dyalog bridge"},{"location":"application-development/file-handling-data-processing/","text":"File handling and data processing Reading data into and getting data out of the workspace. There are some in-built tools for importing data from files and the internet. If you are already familiar with python , R language or .NET then you can use one of the external language bridges to bring data into APL from files via one of these languages. However, it will usually be simpler and faster in the long term to become familiar with the following tools. Binary files or arbitrary file types The term \"Native Files\" refers to any type of file on a hard disk. These can be text or media files, or even executable files. Usually we are interested in various kinds of text files; the rest of this page lists system functions for handling these, including \u2395NGET . For files of arbitrary type and format, some system functions beginning \u2395N . First, we must tie the file, locking it from use by other applications. \u2395NTIE returns a tie number. tn \u2190 '/path/to/file' \u2395NTIE 0 This is a quick summary. For more details see the Native Files cheat sheet and system functions and variables A-Z in the online documentation. In the chapter on selecting from arrays there was an example of reading a text file using \u2395NGET . Before Dyalog version 15.0, reading text files required a couple of extra steps. Some \u2395N... native file functions are general and can be used to read and write any type of file. As a simple example, here we tie the file words.txt , read the data and store it in a variable, and finally untie the file. Note For multi-user systems, take care to set appropriate file access permissions when using \u2395NCREATE , \u2395NTIE and \u2395NLOCK . tn \u2190 'assets/words.txt' \u2395NTIE 0 \u2395 \u2190 10 \u2191 words \u2190 ( \u2395UCS 10 )( \u2260\u2286\u22a2 ) \u2395NREAD tn 82 ( \u2395NSIZE tn ) 0 \u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 A \u2502 A 's\u2502AA' s \u2502 AB 's\u2502ABM' s \u2502 AC 's\u2502ACTH' s \u2502 AI 's\u2502AIDS' s \u2502 AM ' s \u2502 \u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2395NUNTIE\u2395NNUMS Text Files Generally the \u2395N... family of system functions are for reading and writing native files as described in the documentation. \u2395NGET and \u2395NPUT are useful for reading and writing text files without having to tie and untie them. ( \u2282 words ) \u2395NPUT 'data/words.txt' \u235d Write words to a unicode text file ( content encoding newline ) \u2190 \u2395NGET 'data/words.txt' \u235d Read words from a unicode text file words \u2190 ( \u2395UCS newline )(( ~\u220a \u2368 ) \u2286\u22a2 ) content \u235d Split words on each new line Tabular data For small amounts of data, it is usually quickest and easiest to use raw APL with arrays. Nested matrices offer a convenient format comparable to a spreadsheet (in fact, they can be directly imported from Excel or CSV files). Inverted tables take the idea of column store and implement them in APL for great search and retrieval performance. \u2395 CSV Comma separated values are a very common and convenient . While we encourage you to read the documentation for a full description, here is an overview of features of \u2395CSV : Read data from and write data to files directly data \u2190 \u2395CSV '/path/to/file.csv' Separate the header (first row) from the rest of the data ( data header ) \u2190 \u2395CSV '/path/to/file.csv' \u236c \u236c 1 Treat specific columns of input as numeric or text, depending on the options provided. The 4 here indicates to convert numeric values if possible, else keep the value as text. numeric_if_possible \u2190 \u2395CSV '/path/to/file.csv' \u236c 4 Use a separator other than commas, using the \"Separator\" variant option, for example using tabs ( \u2395UCS 9 ) for Tab Separated Values (.tsv). tsv \u2190 \u2395CSV \u2360 'Separator' ( \u2395UCS 9 ) \u22a2 '/path/to/file.csv' Read data chunks at a time so as to not fill the workspace, using the \"Records\" variant option. Example path \u2190 '/path/to/file.csv' \u235d The file path as simple character vector ReadCSV10 \u2190 \u2395CSV \u2360 'Records' 10 \u235d A function to read CSV 10 records at a time tn \u2190 path \u2395NTIE 0 \u235d Tie the file - this locks it from use by other applications first10 \u2190 ReadCSV10 tn \u235d Read the first 10 records (rows) second10 \u2190 ReadCSV10 tn \u235d Read the next 10 \u2262 \u00a8 first10 second10 10 10 first10 second10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 1 \u2502 JQZUK \u2502\u2502\u2502 11 \u2502 DECJM \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 2 \u2502 ANPYW \u2502\u2502\u2502 12 \u2502 PXPGL \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 3 \u2502 WYVSR \u2502\u2502\u2502 13 \u2502 SYSCN \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 4 \u2502 ZOGOX \u2502\u2502\u2502 14 \u2502 EKDPS \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 5 \u2502 CXKRS \u2502\u2502\u2502 15 \u2502 XCOHA \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 6 \u2502 BFTYO \u2502\u2502\u2502 16 \u2502 RDAHR \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 7 \u2502 VFLAS \u2502\u2502\u2502 17 \u2502 KPUTW \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 8 \u2502 BAFYD \u2502\u2502\u2502 18 \u2502 TPDOD \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 9 \u2502 XPEBP \u2502\u2502\u2502 19 \u2502 BGIVA \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 10 \u2502 UVBFG \u2502\u2502\u2502 20 \u2502 IITSO \u2502\u2502 \u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2395NUNTIE tn \u235d Don't forget to untie the file after use! If you are reading large tabular data, you can use \u2395MAP to access the data without bringing it all into your workspace, potentially preventing a WS FULL error. Parsing content from text files using Dyalog APL's \u2395CSV by Ad\u00e1m's APL \u2395JSON \u2395XML XML is a format that has fallen out of favour in recent years, but is still useful to be able to import and export it easily when you need to. \u2395R/\u2395S Search and replace using regular expressions. \u2395R and \u2395S are dyadic operators which allow searching text using Pearl Compatible Regular Expressions (PCRE). Dyalog's search and replace accept multiple search and replace strings and/or functions in a single call. \u2395MAP Full documentation for \u2395MAP . The memory mapping function \u2395MAP associates a file on disk with an APL array in the workspace. This is useful if you are working with data that cannot fit inside the available workspace memory. One approach might be to read the data in chunks and process one chunk at a time (for example, see the \"Records\" variant option for \u2395CSV ). Another approach is to use \u2395MAP . If you are working with data which is very large, you might not want or be able to bring all of the data into the workspace in order to process it. If you are reading large tabular data, \u2395CSV 's Records variant \u2360 option might be a convenient tool when used in combination with \u2395MAP . \u2395MAP allows you to treat a file on disk as if it were a variable in the workspace. text \u2190 80 \u00af1 \u2395MAP '/path/to/file.txt' You must specify the type according to the Data Representation \u2395DR of the data to be read. \u2395 JSON JSON is not only a convenient way to represent nested data structures, but also a convenient data representation for the modern web since it is natively handled by JavaScript. \u2395JSON converts between APL arrays, including namespaces and text vector representations of JSON . 'ns' \u2395NS \u236c ns . var \u2190 1 2 3 ns . char \u2190 'abc' \u2395JSON ns { \"char\" : \"abc\" , \"var\" : [ 1 , 2 , 3 ] } A JSON object in Dyalog uses dot-syntax to access members. Some JSON object keys are invalid APL names, so Dyalog works around this using special characters: ( \u2395JSON '{\"$name\": \"steve\", \"3var\": \"what\"}' ) . \u2395nl -\u2373 9 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u23593var \u2502 \u2359\u235936\u2359name \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Be aware of incompatible namespaces, although most of the time you will be converting data rather than namespaces. 'ns' \u2395NS \u236c ns . fn \u2190 { \u2375 } \u2395JSON ns DOMAIN ERROR : JSON export : item \"fn\" of the right argument cannot be converted ( \u2395IO = 1 ) \u2395JSON ns \u2227 Recall the expression for an empty JSON object . Using \u2395JSON , we can also display error information in a human-readable format . Component files If it is only APL systems that need to store data, the most convenient and efficient way to store that data is in APL component files . Here we will briefly look at the basic usage of component files. A full treatment of component files is provided in Chapter N of Mastering Dyalog APL and more information can be found in the component file documentation . System functions that deal with component files begin \u2395F... . Tie and untie In Dyalog, component files have the extension .dcf (Dyalog Component File) and must be tied and untied . A component file may be exclusively tied ( \u2395FTIE ) or have a shared tie ( \u2395FSTIE ). With an exclusive tie, no other process may access the file. tn \u2190 'cfile' \u2395FCREATE 0 \u235d The file is exclusively tied \u2395FUNTIE tn \u235d The file is untied, it can now be used by other applications and processes The next time we want to use this file, we can use \u2395FTIE instead of \u2395FCREATE . The right argument to these functions specifies a tie number (which can be different each time the file is tied), but with a right argument of 0 the next available tie number is used (component file tie numbers start at 1). tn \u2190 'cfile' \u2395FTIE 0 \u235d The file on disk is cfile.dcf, but this extension is assumed if not specified The structure of a component file is analogous to a nested vector of arrays. We add new values by appending them to the end of a file. ( 3 3 \u2374\u2373 9 ) \u2395FAPPEND tn ( \u2191 'Dave' 'Sam' 'Ellie' 'Saif' ) \u2395FAPPEND tn nested \u2190 2 2 \u2374 'this' 0 'that' ( 1 2 3 ) nested \u2395FAPPEND tn Each array stored in a component file (a component ) is referred to by its index in the file (its component number ), starting from 1 (not affected by \u2395IO ). \u2395FREAD \u00a8 tn , \u00a8 1 2 3 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 Dave \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 4 5 6 \u2502 Sam \u2502\u2502 this \u2502 0 \u2502\u2502 \u2502 7 8 9 \u2502 Ellie \u2502\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502 Saif \u2502\u2502 that \u2502 1 2 3 \u2502\u2502 \u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A component can be replaced by any other array. 'Hello' \u2395FREPLACE tn 2 \u2395FREAD tn 2 Hello Use \u2395FSIZE to find the range of components and file size: \u2395FSIZE tn 1 4 1744 1.8446744073709552E19 The elements of \u2395FSIZE are: [1] The number of the first component [2] 1 + the number of the last component (that is, where a new component will be if \u2395FAPPEND is used) [3] The current size of the file in bytes [4] The file size limit in bytes Components can be removed from the beginning or end of a component file, with the \u2395FDROP function analogous to \u237a\u2193\u2375 . \u2395FDROP tn 1 \u2395FDROP tn \u00af1 \u2395FREAD \u00a8 tn , \u00a8 1 2 3 FILE INDEX ERROR : cfile . dcf : No such component \u2395FREAD \u00a8 tn , \u00a8 1 2 3 \u2227 \u2395FREAD tn 2 \u235d Only component number 2 remains Dave Sam Ellie Saif After use, don't forget to untie all tied component files using \u2395FUNTIE \u2395FNUMS . Multi-user access If you are working on a system through which multiple users need to access the same component files, it is important to become familiar with multi-user access techniques and potential pitfalls. In particular, you will need to use \u2395FSTIE , \u2395FHOLD , \u2395FSTACK and probably \u2395AN . Chapter N of Mastering Dyalog APL Online documentation: Controlling multi-user access Multi-user access can mean manual access by actual human users, or automated access by separate computers or processes. Downloading data from the internet The HttpCommand class is built on top of the Conga framework for TCP/IP communications. At the most basic level, it can be used to perform HTTP requests to retrieve data from servers. ] load HttpCommand #.HttpCommand \u2374 ( #.HttpCommand.Get 'https://google.com').Data 14107 For more information, see the HttpCommand document . Alternatively, there is documentation within the comments of the code for the HttpCommand class; simply use )ed HttpCommand or press Shift+Enter with the text cursor on the name in the session. Previous versions of HttpCommand were documented in HttpCommand.md in the library-conga GitHub repository .","title":"File handling and data processing"},{"location":"application-development/file-handling-data-processing/#file-handling-and-data-processing","text":"Reading data into and getting data out of the workspace. There are some in-built tools for importing data from files and the internet. If you are already familiar with python , R language or .NET then you can use one of the external language bridges to bring data into APL from files via one of these languages. However, it will usually be simpler and faster in the long term to become familiar with the following tools.","title":"File handling and data processing"},{"location":"application-development/file-handling-data-processing/#binary-files-or-arbitrary-file-types","text":"The term \"Native Files\" refers to any type of file on a hard disk. These can be text or media files, or even executable files. Usually we are interested in various kinds of text files; the rest of this page lists system functions for handling these, including \u2395NGET . For files of arbitrary type and format, some system functions beginning \u2395N . First, we must tie the file, locking it from use by other applications. \u2395NTIE returns a tie number. tn \u2190 '/path/to/file' \u2395NTIE 0 This is a quick summary. For more details see the Native Files cheat sheet and system functions and variables A-Z in the online documentation. In the chapter on selecting from arrays there was an example of reading a text file using \u2395NGET . Before Dyalog version 15.0, reading text files required a couple of extra steps. Some \u2395N... native file functions are general and can be used to read and write any type of file. As a simple example, here we tie the file words.txt , read the data and store it in a variable, and finally untie the file. Note For multi-user systems, take care to set appropriate file access permissions when using \u2395NCREATE , \u2395NTIE and \u2395NLOCK . tn \u2190 'assets/words.txt' \u2395NTIE 0 \u2395 \u2190 10 \u2191 words \u2190 ( \u2395UCS 10 )( \u2260\u2286\u22a2 ) \u2395NREAD tn 82 ( \u2395NSIZE tn ) 0 \u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 A \u2502 A 's\u2502AA' s \u2502 AB 's\u2502ABM' s \u2502 AC 's\u2502ACTH' s \u2502 AI 's\u2502AIDS' s \u2502 AM ' s \u2502 \u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2395NUNTIE\u2395NNUMS","title":"Binary files or arbitrary file types"},{"location":"application-development/file-handling-data-processing/#text-files","text":"Generally the \u2395N... family of system functions are for reading and writing native files as described in the documentation. \u2395NGET and \u2395NPUT are useful for reading and writing text files without having to tie and untie them. ( \u2282 words ) \u2395NPUT 'data/words.txt' \u235d Write words to a unicode text file ( content encoding newline ) \u2190 \u2395NGET 'data/words.txt' \u235d Read words from a unicode text file words \u2190 ( \u2395UCS newline )(( ~\u220a \u2368 ) \u2286\u22a2 ) content \u235d Split words on each new line","title":"Text Files"},{"location":"application-development/file-handling-data-processing/#tabular-data","text":"For small amounts of data, it is usually quickest and easiest to use raw APL with arrays. Nested matrices offer a convenient format comparable to a spreadsheet (in fact, they can be directly imported from Excel or CSV files). Inverted tables take the idea of column store and implement them in APL for great search and retrieval performance.","title":"Tabular data"},{"location":"application-development/file-handling-data-processing/#csv","text":"Comma separated values are a very common and convenient . While we encourage you to read the documentation for a full description, here is an overview of features of \u2395CSV : Read data from and write data to files directly data \u2190 \u2395CSV '/path/to/file.csv' Separate the header (first row) from the rest of the data ( data header ) \u2190 \u2395CSV '/path/to/file.csv' \u236c \u236c 1 Treat specific columns of input as numeric or text, depending on the options provided. The 4 here indicates to convert numeric values if possible, else keep the value as text. numeric_if_possible \u2190 \u2395CSV '/path/to/file.csv' \u236c 4 Use a separator other than commas, using the \"Separator\" variant option, for example using tabs ( \u2395UCS 9 ) for Tab Separated Values (.tsv). tsv \u2190 \u2395CSV \u2360 'Separator' ( \u2395UCS 9 ) \u22a2 '/path/to/file.csv' Read data chunks at a time so as to not fill the workspace, using the \"Records\" variant option. Example path \u2190 '/path/to/file.csv' \u235d The file path as simple character vector ReadCSV10 \u2190 \u2395CSV \u2360 'Records' 10 \u235d A function to read CSV 10 records at a time tn \u2190 path \u2395NTIE 0 \u235d Tie the file - this locks it from use by other applications first10 \u2190 ReadCSV10 tn \u235d Read the first 10 records (rows) second10 \u2190 ReadCSV10 tn \u235d Read the next 10 \u2262 \u00a8 first10 second10 10 10 first10 second10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 1 \u2502 JQZUK \u2502\u2502\u2502 11 \u2502 DECJM \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 2 \u2502 ANPYW \u2502\u2502\u2502 12 \u2502 PXPGL \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 3 \u2502 WYVSR \u2502\u2502\u2502 13 \u2502 SYSCN \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 4 \u2502 ZOGOX \u2502\u2502\u2502 14 \u2502 EKDPS \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 5 \u2502 CXKRS \u2502\u2502\u2502 15 \u2502 XCOHA \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 6 \u2502 BFTYO \u2502\u2502\u2502 16 \u2502 RDAHR \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 7 \u2502 VFLAS \u2502\u2502\u2502 17 \u2502 KPUTW \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 8 \u2502 BAFYD \u2502\u2502\u2502 18 \u2502 TPDOD \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 9 \u2502 XPEBP \u2502\u2502\u2502 19 \u2502 BGIVA \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 10 \u2502 UVBFG \u2502\u2502\u2502 20 \u2502 IITSO \u2502\u2502 \u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2395NUNTIE tn \u235d Don't forget to untie the file after use! If you are reading large tabular data, you can use \u2395MAP to access the data without bringing it all into your workspace, potentially preventing a WS FULL error. Parsing content from text files using Dyalog APL's \u2395CSV by Ad\u00e1m's APL","title":"\u2395CSV"},{"location":"application-development/file-handling-data-processing/#json","text":"","title":"\u2395JSON"},{"location":"application-development/file-handling-data-processing/#xml","text":"XML is a format that has fallen out of favour in recent years, but is still useful to be able to import and export it easily when you need to.","title":"\u2395XML"},{"location":"application-development/file-handling-data-processing/#rs","text":"Search and replace using regular expressions. \u2395R and \u2395S are dyadic operators which allow searching text using Pearl Compatible Regular Expressions (PCRE). Dyalog's search and replace accept multiple search and replace strings and/or functions in a single call.","title":"\u2395R/\u2395S"},{"location":"application-development/file-handling-data-processing/#map","text":"Full documentation for \u2395MAP . The memory mapping function \u2395MAP associates a file on disk with an APL array in the workspace. This is useful if you are working with data that cannot fit inside the available workspace memory. One approach might be to read the data in chunks and process one chunk at a time (for example, see the \"Records\" variant option for \u2395CSV ). Another approach is to use \u2395MAP . If you are working with data which is very large, you might not want or be able to bring all of the data into the workspace in order to process it. If you are reading large tabular data, \u2395CSV 's Records variant \u2360 option might be a convenient tool when used in combination with \u2395MAP . \u2395MAP allows you to treat a file on disk as if it were a variable in the workspace. text \u2190 80 \u00af1 \u2395MAP '/path/to/file.txt' You must specify the type according to the Data Representation \u2395DR of the data to be read.","title":"\u2395MAP"},{"location":"application-development/file-handling-data-processing/#json_1","text":"JSON is not only a convenient way to represent nested data structures, but also a convenient data representation for the modern web since it is natively handled by JavaScript. \u2395JSON converts between APL arrays, including namespaces and text vector representations of JSON . 'ns' \u2395NS \u236c ns . var \u2190 1 2 3 ns . char \u2190 'abc' \u2395JSON ns { \"char\" : \"abc\" , \"var\" : [ 1 , 2 , 3 ] } A JSON object in Dyalog uses dot-syntax to access members. Some JSON object keys are invalid APL names, so Dyalog works around this using special characters: ( \u2395JSON '{\"$name\": \"steve\", \"3var\": \"what\"}' ) . \u2395nl -\u2373 9 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u23593var \u2502 \u2359\u235936\u2359name \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Be aware of incompatible namespaces, although most of the time you will be converting data rather than namespaces. 'ns' \u2395NS \u236c ns . fn \u2190 { \u2375 } \u2395JSON ns DOMAIN ERROR : JSON export : item \"fn\" of the right argument cannot be converted ( \u2395IO = 1 ) \u2395JSON ns \u2227 Recall the expression for an empty JSON object . Using \u2395JSON , we can also display error information in a human-readable format .","title":"\u2395JSON"},{"location":"application-development/file-handling-data-processing/#component-files","text":"If it is only APL systems that need to store data, the most convenient and efficient way to store that data is in APL component files . Here we will briefly look at the basic usage of component files. A full treatment of component files is provided in Chapter N of Mastering Dyalog APL and more information can be found in the component file documentation . System functions that deal with component files begin \u2395F... .","title":"Component files"},{"location":"application-development/file-handling-data-processing/#tie-and-untie","text":"In Dyalog, component files have the extension .dcf (Dyalog Component File) and must be tied and untied . A component file may be exclusively tied ( \u2395FTIE ) or have a shared tie ( \u2395FSTIE ). With an exclusive tie, no other process may access the file. tn \u2190 'cfile' \u2395FCREATE 0 \u235d The file is exclusively tied \u2395FUNTIE tn \u235d The file is untied, it can now be used by other applications and processes The next time we want to use this file, we can use \u2395FTIE instead of \u2395FCREATE . The right argument to these functions specifies a tie number (which can be different each time the file is tied), but with a right argument of 0 the next available tie number is used (component file tie numbers start at 1). tn \u2190 'cfile' \u2395FTIE 0 \u235d The file on disk is cfile.dcf, but this extension is assumed if not specified The structure of a component file is analogous to a nested vector of arrays. We add new values by appending them to the end of a file. ( 3 3 \u2374\u2373 9 ) \u2395FAPPEND tn ( \u2191 'Dave' 'Sam' 'Ellie' 'Saif' ) \u2395FAPPEND tn nested \u2190 2 2 \u2374 'this' 0 'that' ( 1 2 3 ) nested \u2395FAPPEND tn Each array stored in a component file (a component ) is referred to by its index in the file (its component number ), starting from 1 (not affected by \u2395IO ). \u2395FREAD \u00a8 tn , \u00a8 1 2 3 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 Dave \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 4 5 6 \u2502 Sam \u2502\u2502 this \u2502 0 \u2502\u2502 \u2502 7 8 9 \u2502 Ellie \u2502\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502 Saif \u2502\u2502 that \u2502 1 2 3 \u2502\u2502 \u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A component can be replaced by any other array. 'Hello' \u2395FREPLACE tn 2 \u2395FREAD tn 2 Hello Use \u2395FSIZE to find the range of components and file size: \u2395FSIZE tn 1 4 1744 1.8446744073709552E19 The elements of \u2395FSIZE are: [1] The number of the first component [2] 1 + the number of the last component (that is, where a new component will be if \u2395FAPPEND is used) [3] The current size of the file in bytes [4] The file size limit in bytes Components can be removed from the beginning or end of a component file, with the \u2395FDROP function analogous to \u237a\u2193\u2375 . \u2395FDROP tn 1 \u2395FDROP tn \u00af1 \u2395FREAD \u00a8 tn , \u00a8 1 2 3 FILE INDEX ERROR : cfile . dcf : No such component \u2395FREAD \u00a8 tn , \u00a8 1 2 3 \u2227 \u2395FREAD tn 2 \u235d Only component number 2 remains Dave Sam Ellie Saif After use, don't forget to untie all tied component files using \u2395FUNTIE \u2395FNUMS .","title":"Tie and untie"},{"location":"application-development/file-handling-data-processing/#multi-user-access","text":"If you are working on a system through which multiple users need to access the same component files, it is important to become familiar with multi-user access techniques and potential pitfalls. In particular, you will need to use \u2395FSTIE , \u2395FHOLD , \u2395FSTACK and probably \u2395AN . Chapter N of Mastering Dyalog APL Online documentation: Controlling multi-user access Multi-user access can mean manual access by actual human users, or automated access by separate computers or processes.","title":"Multi-user access"},{"location":"application-development/file-handling-data-processing/#downloading-data-from-the-internet","text":"The HttpCommand class is built on top of the Conga framework for TCP/IP communications. At the most basic level, it can be used to perform HTTP requests to retrieve data from servers. ] load HttpCommand #.HttpCommand \u2374 ( #.HttpCommand.Get 'https://google.com').Data 14107 For more information, see the HttpCommand document . Alternatively, there is documentation within the comments of the code for the HttpCommand class; simply use )ed HttpCommand or press Shift+Enter with the text cursor on the name in the session. Previous versions of HttpCommand were documented in HttpCommand.md in the library-conga GitHub repository .","title":"Downloading data from the internet"},{"location":"application-development/sql/","text":"SQL Interface SQAPL provides an interface to ODBC-compliant SQL databases including Oracle, Microsoft Access, MySQL and DB2. Even properly-formatted text and CSV (comma separated value) files can be accessed using SQAPL. SQAPL contains functions to read, write and manage SQL databases. It is supported on all platforms, although some platforms could incur an additional licence fee for the server component of SQAPL. For more information about using SQAPL, see the SQL Interface Guide. For small amounts of data, it is usually quickest and easiest to use raw APL with arrays. Nested matrices offer a convenient format comparable to a spreadsheet (in fact, they can be directly imported from Excel or CSV files). Inverted tables take the idea of column store and implement them in APL for great search and retrieval performance. For quick access to simply read data from or write data to a table, the functions LoadSQL and SaveSQL from the utility workspace LOADDATA may be all that you need. 'LoadSQL' 'SaveSQL' \u2395CY 'LOADDATA' LoadSQL 'NorthWind' 'products' Using SQAPL, you can: - Retrieve a list of available data sources, and connect to one or more of them. - Query the database catalogue, to determine which tables, view and columns exist in a data source. - Prepare and then repeatedly execute SQL statements, or execute SQL statements immediately without first preparing them. Multiple statements may be active simultaneously. - Retrieve data from a result set. Retrieve a description of the contents of a result set. - Execute SQL statements multiple times using a matrix containing a row of data for each execution (known as Bulk Input). - Commit or roll back transactions. - If connected with sufficient privileges, execute any SQL statement supported by the database management system, including the creation of tables or views (Data Definition Language \u2013 or DDL), indexes, stored procedures, or GRANT statements (etc). - Retrieve a list of data types supported by a data source. Get Started SQAPL ships with Dyalog APL. Simply copy it into the active workspace to start using it: 'SQA' \u2395CY ' SQAPL ] names SQA SQA . Apl2Scar SQA . DefaultXlate SQA . GetInfo SQA . SetData SQA . TypeInfo SQA . AplVersion SQA . Describe SQA . GetWarning SQA . SetDelete SQA . X SQA . BrowseConnect SQA . Do SQA . Init SQA . SetExec SQA . buildcovers SQA . Cancel SQA . Exec SQA . NativeSQL SQA . SetInsert SQA . dxlate SQA . Close SQA . ExecDirect SQA . Parse SQA . SetPrepare SQA . \u2359SQAPL SQA . Columns SQA . ExecN SQA . Prepare SQA . SetUpdate SQA . \u2359SQAPL1 SQA . Connect SQA . Fetch SQA . PutData SQA . Tables SQA . \u2359SQAParse SQA . CursorName SQA . FileVersion SQA . Scar2Apl SQA . Transact SQA . DSN SQA . GetData SQA . SetColumns SQA . Tree who is it for? how do I get started? Basic use Integrating into my application On Microsoft Windows, ... drivers SQAPL on macOS is currently not supported. On Linux","title":"SQL Interface"},{"location":"application-development/sql/#sql-interface","text":"SQAPL provides an interface to ODBC-compliant SQL databases including Oracle, Microsoft Access, MySQL and DB2. Even properly-formatted text and CSV (comma separated value) files can be accessed using SQAPL. SQAPL contains functions to read, write and manage SQL databases. It is supported on all platforms, although some platforms could incur an additional licence fee for the server component of SQAPL. For more information about using SQAPL, see the SQL Interface Guide. For small amounts of data, it is usually quickest and easiest to use raw APL with arrays. Nested matrices offer a convenient format comparable to a spreadsheet (in fact, they can be directly imported from Excel or CSV files). Inverted tables take the idea of column store and implement them in APL for great search and retrieval performance. For quick access to simply read data from or write data to a table, the functions LoadSQL and SaveSQL from the utility workspace LOADDATA may be all that you need. 'LoadSQL' 'SaveSQL' \u2395CY 'LOADDATA' LoadSQL 'NorthWind' 'products' Using SQAPL, you can: - Retrieve a list of available data sources, and connect to one or more of them. - Query the database catalogue, to determine which tables, view and columns exist in a data source. - Prepare and then repeatedly execute SQL statements, or execute SQL statements immediately without first preparing them. Multiple statements may be active simultaneously. - Retrieve data from a result set. Retrieve a description of the contents of a result set. - Execute SQL statements multiple times using a matrix containing a row of data for each execution (known as Bulk Input). - Commit or roll back transactions. - If connected with sufficient privileges, execute any SQL statement supported by the database management system, including the creation of tables or views (Data Definition Language \u2013 or DDL), indexes, stored procedures, or GRANT statements (etc). - Retrieve a list of data types supported by a data source.","title":"SQL Interface"},{"location":"application-development/sql/#get-started","text":"SQAPL ships with Dyalog APL. Simply copy it into the active workspace to start using it: 'SQA' \u2395CY ' SQAPL ] names SQA SQA . Apl2Scar SQA . DefaultXlate SQA . GetInfo SQA . SetData SQA . TypeInfo SQA . AplVersion SQA . Describe SQA . GetWarning SQA . SetDelete SQA . X SQA . BrowseConnect SQA . Do SQA . Init SQA . SetExec SQA . buildcovers SQA . Cancel SQA . Exec SQA . NativeSQL SQA . SetInsert SQA . dxlate SQA . Close SQA . ExecDirect SQA . Parse SQA . SetPrepare SQA . \u2359SQAPL SQA . Columns SQA . ExecN SQA . Prepare SQA . SetUpdate SQA . \u2359SQAPL1 SQA . Connect SQA . Fetch SQA . PutData SQA . Tables SQA . \u2359SQAParse SQA . CursorName SQA . FileVersion SQA . Scar2Apl SQA . Transact SQA . DSN SQA . GetData SQA . SetColumns SQA . Tree who is it for? how do I get started? Basic use Integrating into my application On Microsoft Windows, ... drivers SQAPL on macOS is currently not supported. On Linux","title":"Get Started"},{"location":"application-development/web-communications/","text":"Web communications HttpCommand HttpCommand online documentation HttpCommand is a utility is designed to make it easy for the APL user to send requests to and receive responses from HTTP servers like web servers and web services. HttpCommand is included with Dyalog APL as a loadable utility. Below is a simple example of making a GET request to a web API: ] Get HttpCommand \u235d Use ]Load prior to Dyalog version 18.2 #.HttpCommand response \u2190 HttpCommand . Get 'https://catfact.ninja/fact' response . ( HttpStatus HttpMessage ) \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 200 \u2502 OK \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2518 response . Data { \"fact\" : \"In an average year, cat owners in the United States spend over $2 billion on cat food.\" , \"length\" : 86 } Jarvis Web Service Framework Jarvis online documentation Jarvis allows you to serve up a single APL function or an entire application, as a an HTTP/JSON or RESTful web service. Jarvis automatically converts payloads between JSON and APL arrays, can serve static HTTP resources and integrates WebSocket support with publish/subscribe capability. Jarvis can maintain application session state, with user validation based on HTTP Basic authentication, custom authentication, and/or client-side certificates. TCP Client and Server Library (Conga) Conga user guide Conga provides network communication capabilities for APL applications. Higher-level tools like Jarvis, MiServer, HttpCommand and FtpClient are all built upon Conga, which provides fundamental TCP client and server APIs, with optional web socket support. In addition to raw or text formats suitable for communication with non-APL peers, Conga provides a protocol layer that can transmit APL arrays in binary format between two APL interpreters running Conga. Conga embeds GnuTLS and supports secure and encrypted communications. APL client and server applications can require and validate peer certificate information. There is also support for Integrated Windows Authentication, enabling identification of users who already logged into a domain controller without re-entering credentials. APLSSH github.com/Dyalog/aplssh This is a wrapper around the libssh2 library. Currently, it only exposes a small fraction of its functionality. It can execute remote commands, and read and write files. Using Microsoft .NET Dyalog can be used with industry-standard Microsoft components in the same way as most other programming languages that integrate with Microsoft .NET: Dyalog can be used as an ASP.NET scripting language to build web pages under Microsoft IIS. SharePoint WebParts can be developed using Dyalog as a .NET programming language. Microsoft IIS can also serve up Web Services implemented in Dyalog. See chapters 6 through 9 of the Dyalog for Microsoft Windows .NET Interface Guide Dyalog can also be used to power web solutions more indirectly, by acting as a participant in message queuing systems like Windows Communications Foundation / MSMQ \u2013 or any tool that is based on Microsoft .NET. Conga TCP Wrapper Conga User Guide Provides wrappers for listening (server) and client sockets, which can, optionally, be made secure using TLS. Sockets can be used to transmit either raw byte streams or entire APL arrays from one process to another. Code samples are provided, showing how to build web servers and clients, a simple FTP client and server and an RPC framework.","title":"Web communications"},{"location":"application-development/web-communications/#web-communications","text":"","title":"Web communications"},{"location":"application-development/web-communications/#httpcommand","text":"HttpCommand online documentation HttpCommand is a utility is designed to make it easy for the APL user to send requests to and receive responses from HTTP servers like web servers and web services. HttpCommand is included with Dyalog APL as a loadable utility. Below is a simple example of making a GET request to a web API: ] Get HttpCommand \u235d Use ]Load prior to Dyalog version 18.2 #.HttpCommand response \u2190 HttpCommand . Get 'https://catfact.ninja/fact' response . ( HttpStatus HttpMessage ) \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 200 \u2502 OK \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2518 response . Data { \"fact\" : \"In an average year, cat owners in the United States spend over $2 billion on cat food.\" , \"length\" : 86 }","title":"HttpCommand"},{"location":"application-development/web-communications/#jarvis-web-service-framework","text":"Jarvis online documentation Jarvis allows you to serve up a single APL function or an entire application, as a an HTTP/JSON or RESTful web service. Jarvis automatically converts payloads between JSON and APL arrays, can serve static HTTP resources and integrates WebSocket support with publish/subscribe capability. Jarvis can maintain application session state, with user validation based on HTTP Basic authentication, custom authentication, and/or client-side certificates.","title":"Jarvis Web Service Framework"},{"location":"application-development/web-communications/#tcp-client-and-server-library-conga","text":"Conga user guide Conga provides network communication capabilities for APL applications. Higher-level tools like Jarvis, MiServer, HttpCommand and FtpClient are all built upon Conga, which provides fundamental TCP client and server APIs, with optional web socket support. In addition to raw or text formats suitable for communication with non-APL peers, Conga provides a protocol layer that can transmit APL arrays in binary format between two APL interpreters running Conga. Conga embeds GnuTLS and supports secure and encrypted communications. APL client and server applications can require and validate peer certificate information. There is also support for Integrated Windows Authentication, enabling identification of users who already logged into a domain controller without re-entering credentials.","title":"TCP Client and Server Library (Conga)"},{"location":"application-development/web-communications/#aplssh","text":"github.com/Dyalog/aplssh This is a wrapper around the libssh2 library. Currently, it only exposes a small fraction of its functionality. It can execute remote commands, and read and write files.","title":"APLSSH"},{"location":"application-development/web-communications/#using-microsoft-net","text":"Dyalog can be used with industry-standard Microsoft components in the same way as most other programming languages that integrate with Microsoft .NET: Dyalog can be used as an ASP.NET scripting language to build web pages under Microsoft IIS. SharePoint WebParts can be developed using Dyalog as a .NET programming language. Microsoft IIS can also serve up Web Services implemented in Dyalog. See chapters 6 through 9 of the Dyalog for Microsoft Windows .NET Interface Guide Dyalog can also be used to power web solutions more indirectly, by acting as a participant in message queuing systems like Windows Communications Foundation / MSMQ \u2013 or any tool that is based on Microsoft .NET.","title":"Using Microsoft .NET"},{"location":"application-development/web-communications/#conga-tcp-wrapper","text":"Conga User Guide Provides wrappers for listening (server) and client sockets, which can, optionally, be made secure using TLS. Sockets can be used to transmit either raw byte streams or entire APL arrays from one process to another. Code samples are provided, showing how to build web servers and clients, a simple FTP client and server and an RPC framework.","title":"Conga TCP Wrapper"},{"location":"development-environment/","text":"Development Environment Dyalog provides two integrated development environments (IDEs). There is the Dyalog IDE for Microsoft Windows, and the Remote IDE ( RIDE ). The RIDE can be used on all platforms, but is the only GUI available for Linux and macOS. As the name suggests, the RIDE also provides remote interaction and debugging capabilities over a network. Microsoft Windows macOS Dyalog for Docker Linux .deb (Debian/Ubuntu) Linux .rpm (Fedora/openSUSE) Raspberry Pi (32-bit Debian/Raspbian) ChromeOS (64-bit Intel) .flex { display: flex; align-items: center; justify-content: space-around; padding: 0 1rem 0 1rem; } .flex-item { text-align: center; }","title":"Development Environment"},{"location":"development-environment/#development-environment","text":"Dyalog provides two integrated development environments (IDEs). There is the Dyalog IDE for Microsoft Windows, and the Remote IDE ( RIDE ). The RIDE can be used on all platforms, but is the only GUI available for Linux and macOS. As the name suggests, the RIDE also provides remote interaction and debugging capabilities over a network. Microsoft Windows macOS Dyalog for Docker Linux .deb (Debian/Ubuntu) Linux .rpm (Fedora/openSUSE) Raspberry Pi (32-bit Debian/Raspbian) ChromeOS (64-bit Intel) .flex { display: flex; align-items: center; justify-content: space-around; padding: 0 1rem 0 1rem; } .flex-item { text-align: center; }","title":"Development Environment"},{"location":"development-environment/install/","text":"Installation Dyalog provides installation packages for popular operating systems which can be downloaded for free . Microsoft Windows This is a quick overview of the installation process. Full installation instructions are in the file setup_readme.htm included in the install package windows_64_<version>_unicode.zip which can be downloaded from the Dyalog website . For more information about installed components, registry entries and configuration etc. see the Dyalog for Microsoft Windows Installation and Configuration Guide . Go to the download page and download the installation package windows_64_<version>_unicode.zip . Unzip the installation package and double click on setup.exe . Restart the installer with administrator privileges . Choose your APL keyboard. The default APL keyboard uses Ctrl as the APL shifting key. It does not prevent copy and paste shortcuts, but some prefer to use a different method. If you do not want to use the Ctrl key as your APL shifting key, untick \u2611 Install the Dyalog APL IME for 64 bit Windows and head over to the section on typing APL for alternatives. Info Once Dyalog is installed, you can use \u229e Win + Spacebar to cycle between available keyboard layouts. Click on Default Install . Reboot your PC. Dyalog should now be available in your Start menu. macOS This is a quick overview of the installation process. For more information, see the Dyalog for macOS Installation and Configuration Guide . Download and Install Dyalog Go to the download page and download the installation package for macOS. Double click on the mac_64_<version>_unicode.pkg file. Follow the instructions in the Dyalog Installer window. Close the Dyalog Installer window. Dyalog should now be installed in your Applications folder. Info Dyalog for macOS comes with the Remote Integrated Development Environment . The [Dyalog for macOS Installation and Configuration Guide] contains some of the same information as the RIDE User Guide but with some parts specific to macOS. Choose your APL keyboard. Keyboard layouts and fonts for macOS are described on the dfns website . TODO grab from existing fonts and keyboards page? Or maybe this is only relevant for Windows? But a link from here? Linux This is a quick overview of the installation process. For more information, see the Dyalog for UNIX Installation and Configuration Guide . Note Dyalog for Linux comes with a text-based TTY interface. We recommend installing the RIDE graphical interface as well. Distribution Installation package Debian/Ubuntu 64-bit .deb Fedora/openSUSE 64-bit .rpm Download and Install Dyalog Installation .rpm (Fedora/openSUSE) and .deb (Debian/Ubuntu) files are provided from the Dyalog website . Use your distribution's package manager to install Dyalog. Usually, you can install from the terminal: sudo rpm -i linux_64_<version>_unicode.x86_64.rpm sudo dpkg -i linux_64_<version>_unicode.x86_64.deb Choose your APL keyboard With the increasing prevalence of Wayland, there are some known issues with typing on recent versions of Fedora and Ubuntu. By default, Dyalog uses the Meta (\"Windows\" \u229e Win ) key for entering APL symbols on Linux. Dyalog will override XKB configuration at startup by default. You can prevent this with a startup option. dyalog -nokbd APL keyboard layouts come with most Linux distributions by default, but must be enabled. Follow the instructions on the APL Wiki for your desktop environment. Install the RIDE While Dyalog does come with a bare-bones terminal interface, it is recommended to use the Remote IDE . Download the latest release from GitHub and install it as above. Create an APL session startup script By default, users must \"start\" an APL session from the main RIDE configuration window as described in section 2.1.1 of Mastering Dyalog APL . The following script can be used to launch RIDE and immediately connect to a new Dyalog instance. #!/usr/bin/env sh env RIDE_CONNECT=localhost:4502 ride & dyalog +s -q RIDE_INIT=SERVE:*:4502 To prevent Dyalog taking over the keyboard layout at startup, add -nokbd to the 3rd line in the script. Dyalog installation directory The main Dyalog installation directory is returned by the expression: \u2395 \u2190 2 \u2395NQ # 'GetEnvironment' 'DYALOG' C : \\ Program Files \\ Dyalog \\ Dyalog APL - 64 18.2 Unicode Raspberry Pi First you will need to set your Raspberry Pi up to connect to our public repository, This will allow you to keep your APL installation up to date with new releases. The following are the supported Operating System codenames for 32-bit Dyalog APL: Raspbian (Debian) buster or later (ARMHF) - Hardware Float: this is required for Dyalog 18.0 and later jessie or later (ARMHF) - Hardware Float: this is required for Dyalog 17.1 Note We do not support ARMEL (Software Float) as we consider the performance of software float to be unacceptable on the Raspberry Pi. Dyalog APL will not run on 64-bit Raspbian O/S. wget -O - http://packages.dyalog.com/dyalog-apt-key.gpg.key | sudo apt-key add - CODENAME = $( lsb_release -sc ) echo \"deb http://packages.dyalog.com ${ CODENAME } main\" | sudo tee /etc/apt/sources.list.d/dyalog.list Note If you update the operating system on your Pi, then you should re-run these last two commands so that /etc/apt/sources.list.d/dyalog.list accurately reflects the codename of the version of the distribution that you are running. See packages.dyalog.com for more information and about previous versions of Dyalog and RIDE. Chromebook ChromeOS is not officially supported by Dyalog, but some users have reported success installing the .deb installation package on Intel Chromebooks. There is a forum post with more information.","title":"Installation"},{"location":"development-environment/install/#installation","text":"Dyalog provides installation packages for popular operating systems which can be downloaded for free .","title":"Installation"},{"location":"development-environment/install/#microsoft-windows","text":"This is a quick overview of the installation process. Full installation instructions are in the file setup_readme.htm included in the install package windows_64_<version>_unicode.zip which can be downloaded from the Dyalog website . For more information about installed components, registry entries and configuration etc. see the Dyalog for Microsoft Windows Installation and Configuration Guide . Go to the download page and download the installation package windows_64_<version>_unicode.zip . Unzip the installation package and double click on setup.exe . Restart the installer with administrator privileges . Choose your APL keyboard. The default APL keyboard uses Ctrl as the APL shifting key. It does not prevent copy and paste shortcuts, but some prefer to use a different method. If you do not want to use the Ctrl key as your APL shifting key, untick \u2611 Install the Dyalog APL IME for 64 bit Windows and head over to the section on typing APL for alternatives. Info Once Dyalog is installed, you can use \u229e Win + Spacebar to cycle between available keyboard layouts. Click on Default Install . Reboot your PC. Dyalog should now be available in your Start menu.","title":"Microsoft Windows"},{"location":"development-environment/install/#macos","text":"This is a quick overview of the installation process. For more information, see the Dyalog for macOS Installation and Configuration Guide .","title":"macOS"},{"location":"development-environment/install/#download-and-install-dyalog","text":"Go to the download page and download the installation package for macOS. Double click on the mac_64_<version>_unicode.pkg file. Follow the instructions in the Dyalog Installer window. Close the Dyalog Installer window. Dyalog should now be installed in your Applications folder. Info Dyalog for macOS comes with the Remote Integrated Development Environment . The [Dyalog for macOS Installation and Configuration Guide] contains some of the same information as the RIDE User Guide but with some parts specific to macOS.","title":"Download and Install Dyalog"},{"location":"development-environment/install/#choose-your-apl-keyboard","text":"Keyboard layouts and fonts for macOS are described on the dfns website . TODO grab from existing fonts and keyboards page? Or maybe this is only relevant for Windows? But a link from here?","title":"Choose your APL keyboard."},{"location":"development-environment/install/#linux","text":"This is a quick overview of the installation process. For more information, see the Dyalog for UNIX Installation and Configuration Guide . Note Dyalog for Linux comes with a text-based TTY interface. We recommend installing the RIDE graphical interface as well. Distribution Installation package Debian/Ubuntu 64-bit .deb Fedora/openSUSE 64-bit .rpm","title":"Linux"},{"location":"development-environment/install/#download-and-install-dyalog_1","text":"Installation .rpm (Fedora/openSUSE) and .deb (Debian/Ubuntu) files are provided from the Dyalog website . Use your distribution's package manager to install Dyalog. Usually, you can install from the terminal: sudo rpm -i linux_64_<version>_unicode.x86_64.rpm sudo dpkg -i linux_64_<version>_unicode.x86_64.deb","title":"Download and Install Dyalog"},{"location":"development-environment/install/#choose-your-apl-keyboard_1","text":"With the increasing prevalence of Wayland, there are some known issues with typing on recent versions of Fedora and Ubuntu. By default, Dyalog uses the Meta (\"Windows\" \u229e Win ) key for entering APL symbols on Linux. Dyalog will override XKB configuration at startup by default. You can prevent this with a startup option. dyalog -nokbd APL keyboard layouts come with most Linux distributions by default, but must be enabled. Follow the instructions on the APL Wiki for your desktop environment.","title":"Choose your APL keyboard"},{"location":"development-environment/install/#install-the-ride","text":"While Dyalog does come with a bare-bones terminal interface, it is recommended to use the Remote IDE . Download the latest release from GitHub and install it as above.","title":"Install the RIDE"},{"location":"development-environment/install/#create-an-apl-session-startup-script","text":"By default, users must \"start\" an APL session from the main RIDE configuration window as described in section 2.1.1 of Mastering Dyalog APL . The following script can be used to launch RIDE and immediately connect to a new Dyalog instance. #!/usr/bin/env sh env RIDE_CONNECT=localhost:4502 ride & dyalog +s -q RIDE_INIT=SERVE:*:4502 To prevent Dyalog taking over the keyboard layout at startup, add -nokbd to the 3rd line in the script.","title":"Create an APL session startup script"},{"location":"development-environment/install/#dyalog-installation-directory","text":"The main Dyalog installation directory is returned by the expression: \u2395 \u2190 2 \u2395NQ # 'GetEnvironment' 'DYALOG' C : \\ Program Files \\ Dyalog \\ Dyalog APL - 64 18.2 Unicode","title":"Dyalog installation directory"},{"location":"development-environment/install/#raspberry-pi","text":"First you will need to set your Raspberry Pi up to connect to our public repository, This will allow you to keep your APL installation up to date with new releases. The following are the supported Operating System codenames for 32-bit Dyalog APL: Raspbian (Debian) buster or later (ARMHF) - Hardware Float: this is required for Dyalog 18.0 and later jessie or later (ARMHF) - Hardware Float: this is required for Dyalog 17.1 Note We do not support ARMEL (Software Float) as we consider the performance of software float to be unacceptable on the Raspberry Pi. Dyalog APL will not run on 64-bit Raspbian O/S. wget -O - http://packages.dyalog.com/dyalog-apt-key.gpg.key | sudo apt-key add - CODENAME = $( lsb_release -sc ) echo \"deb http://packages.dyalog.com ${ CODENAME } main\" | sudo tee /etc/apt/sources.list.d/dyalog.list Note If you update the operating system on your Pi, then you should re-run these last two commands so that /etc/apt/sources.list.d/dyalog.list accurately reflects the codename of the version of the distribution that you are running. See packages.dyalog.com for more information and about previous versions of Dyalog and RIDE.","title":"Raspberry Pi"},{"location":"development-environment/install/#chromebook","text":"ChromeOS is not officially supported by Dyalog, but some users have reported success installing the .deb installation package on Intel Chromebooks. There is a forum post with more information.","title":"Chromebook"},{"location":"development-environment/typing/","text":"Typing APL Symbols Dyalog APL's standard US English layout is as follows: \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502~ \u233a \u2502! \u2336 \u2502@ \u236b \u2502# \u2352 \u2502$ \u234b \u2502% \u233d \u2502^ \u2349 \u2502& \u2296 \u2502* \u235f \u2502( \u2371 \u2502) \u2372 \u2502_ ! \u2502+ \u2339 \u2502Backspace\u2502 \u2502` \u22c4 \u25021 \u00a8 \u25022 \u00af \u25023 < \u25024 \u2264 \u25025 = \u25026 \u2265 \u25027 > \u25028 \u2260 \u25029 \u2228 \u25020 \u2227 \u2502- \u00d7 \u2502= \u00f7 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Tab \u2502Q \u2502W \u2502E \u2377 \u2502R \u2502T \u2368 \u2502Y \u2502U \u2502I \u2378 \u2502O \u2365 \u2502P \u2363 \u2502{ \u235e \u2502} \u236c \u2502| \u22a3 \u2502 \u2502 \u2502q ? \u2502w \u2375 \u2502e \u220a \u2502r \u2374 \u2502t ~ \u2502y \u2191 \u2502u \u2193 \u2502i \u2373 \u2502o \u25cb \u2502p * \u2502[ \u2190 \u2502] \u2192 \u2502\\ \u22a2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Caps \u2502A \u2502S \u2502D \u2502F \u2502G \u2502H \u2502J \u2364 \u2502K \u2338 \u2502L \u2337 \u2502: \u2261 \u2502\" \u2262 \u2502Enter \u2502 \u2502Lock \u2502a \u237a \u2502s \u2308 \u2502d \u230a \u2502f _ \u2502g \u2207 \u2502h \u2206 \u2502j \u2218 \u2502k ' \u2502l \u2395 \u2502; \u234e \u2502' \u2355 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Shift \u2502Z \u2286 \u2502X \u2502C \u2502V \u2502B \u2502N \u2502M \u2502 < \u236a \u2502> \u2359 \u2502? \u2360 \u2502Shift \u2502 \u2502 \u2502z \u2282 \u2502x \u2283 \u2502c \u2229 \u2502v \u222a \u2502b \u22a5 \u2502n \u22a4 \u2502m | \u2502, \u235d \u2502. \u2340 \u2502/ \u233f \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Several international keyboard layouts exist with charts available from the dfns website . By platform Microsoft Windows If you select \"Install the Dyalog APL IME for 64 bit Windows\" during installation , you will have an additional keyboard input method with the ability to type APL symbols by holding the Ctrl key. In Windows 10, you can use \u229e Win + Space to choose between available keyboard layouts. Note (May 2022) If you are using Microsoft Windows 11, then you might find that the standard Dyalog IME does not work with UWP (Universal Windows Platform) applications such as Notepad. We are working on both immediate and long-term solutions to meet our customers' wide range of needs. By default, Dyalog's Input Method Editor (IME) uses Ctrl to enter APL symbols. If you would like an alternative input method, such as using the AltGr shifting key or backtick ` prefix similar to tryapl , see section 2.2.5 of Mastering Dyalog APL . Linux (including Raspberry Pi) and macOS See the APL Wiki page about Typing Glyphs on Linux . macOS See the APL Wiki section about Typing Glyphs on macOS . By method Troubleshooting Cannot type APL symbols in RIDE on Linux","title":"Typing APL Symbols"},{"location":"development-environment/typing/#typing-apl-symbols","text":"Dyalog APL's standard US English layout is as follows: \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502~ \u233a \u2502! \u2336 \u2502@ \u236b \u2502# \u2352 \u2502$ \u234b \u2502% \u233d \u2502^ \u2349 \u2502& \u2296 \u2502* \u235f \u2502( \u2371 \u2502) \u2372 \u2502_ ! \u2502+ \u2339 \u2502Backspace\u2502 \u2502` \u22c4 \u25021 \u00a8 \u25022 \u00af \u25023 < \u25024 \u2264 \u25025 = \u25026 \u2265 \u25027 > \u25028 \u2260 \u25029 \u2228 \u25020 \u2227 \u2502- \u00d7 \u2502= \u00f7 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Tab \u2502Q \u2502W \u2502E \u2377 \u2502R \u2502T \u2368 \u2502Y \u2502U \u2502I \u2378 \u2502O \u2365 \u2502P \u2363 \u2502{ \u235e \u2502} \u236c \u2502| \u22a3 \u2502 \u2502 \u2502q ? \u2502w \u2375 \u2502e \u220a \u2502r \u2374 \u2502t ~ \u2502y \u2191 \u2502u \u2193 \u2502i \u2373 \u2502o \u25cb \u2502p * \u2502[ \u2190 \u2502] \u2192 \u2502\\ \u22a2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Caps \u2502A \u2502S \u2502D \u2502F \u2502G \u2502H \u2502J \u2364 \u2502K \u2338 \u2502L \u2337 \u2502: \u2261 \u2502\" \u2262 \u2502Enter \u2502 \u2502Lock \u2502a \u237a \u2502s \u2308 \u2502d \u230a \u2502f _ \u2502g \u2207 \u2502h \u2206 \u2502j \u2218 \u2502k ' \u2502l \u2395 \u2502; \u234e \u2502' \u2355 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Shift \u2502Z \u2286 \u2502X \u2502C \u2502V \u2502B \u2502N \u2502M \u2502 < \u236a \u2502> \u2359 \u2502? \u2360 \u2502Shift \u2502 \u2502 \u2502z \u2282 \u2502x \u2283 \u2502c \u2229 \u2502v \u222a \u2502b \u22a5 \u2502n \u22a4 \u2502m | \u2502, \u235d \u2502. \u2340 \u2502/ \u233f \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Several international keyboard layouts exist with charts available from the dfns website .","title":"Typing APL Symbols"},{"location":"development-environment/typing/#by-platform","text":"","title":"By platform"},{"location":"development-environment/typing/#microsoft-windows","text":"If you select \"Install the Dyalog APL IME for 64 bit Windows\" during installation , you will have an additional keyboard input method with the ability to type APL symbols by holding the Ctrl key. In Windows 10, you can use \u229e Win + Space to choose between available keyboard layouts. Note (May 2022) If you are using Microsoft Windows 11, then you might find that the standard Dyalog IME does not work with UWP (Universal Windows Platform) applications such as Notepad. We are working on both immediate and long-term solutions to meet our customers' wide range of needs. By default, Dyalog's Input Method Editor (IME) uses Ctrl to enter APL symbols. If you would like an alternative input method, such as using the AltGr shifting key or backtick ` prefix similar to tryapl , see section 2.2.5 of Mastering Dyalog APL .","title":"Microsoft Windows"},{"location":"development-environment/typing/#linux-including-raspberry-pi-and-macos","text":"See the APL Wiki page about Typing Glyphs on Linux .","title":"Linux (including Raspberry Pi) and macOS"},{"location":"development-environment/typing/#macos","text":"See the APL Wiki section about Typing Glyphs on macOS .","title":"macOS"},{"location":"development-environment/typing/#by-method","text":"","title":"By method"},{"location":"development-environment/typing/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"development-environment/typing/#cannot-type-apl-symbols-in-ride-on-linux","text":"","title":"Cannot type APL symbols in RIDE on Linux"},{"location":"language/","text":"Getting started with APL You do not need to install anything to get started using and learning the APL language. You can get started with the materials listed here using the TryAPL online interpreter . New to programming The book Mastering Dyalog APL by Bernard Legrand is aimed at new developers and is suitable for people with no prior programming experience. However, it is also a fairly comprehensive guide to the many aspects of both the APL language and the Dyalog development environments, and so intermediate and advanced users will still find it valuable. The book was originally published in 2009, and although it is being re-worked as an e-book to include chapters on recent features, the original is still available as a physical book . New to APL If you are already familiar with a programming language or two, the book Learning APL by Stefan Kruger offers an excellent introduction to modern APL for experienced programmers. Guided problem sets Our APL Course (work in progress) is a set of guided problem sets with examples and explained solutions. It aims to cover the majority of language constructs and is broader in scope than Learning APL , but not as comprehensive as Mastering Dyalog APL .","title":"Getting started with APL"},{"location":"language/#getting-started-with-apl","text":"You do not need to install anything to get started using and learning the APL language. You can get started with the materials listed here using the TryAPL online interpreter .","title":"Getting started with APL"},{"location":"language/#new-to-programming","text":"The book Mastering Dyalog APL by Bernard Legrand is aimed at new developers and is suitable for people with no prior programming experience. However, it is also a fairly comprehensive guide to the many aspects of both the APL language and the Dyalog development environments, and so intermediate and advanced users will still find it valuable. The book was originally published in 2009, and although it is being re-worked as an e-book to include chapters on recent features, the original is still available as a physical book .","title":"New to programming"},{"location":"language/#new-to-apl","text":"If you are already familiar with a programming language or two, the book Learning APL by Stefan Kruger offers an excellent introduction to modern APL for experienced programmers.","title":"New to APL"},{"location":"language/#guided-problem-sets","text":"Our APL Course (work in progress) is a set of guided problem sets with examples and explained solutions. It aims to cover the majority of language constructs and is broader in scope than Learning APL , but not as comprehensive as Mastering Dyalog APL .","title":"Guided problem sets"},{"location":"language/examples/","text":"Quick and dirty examples See more on the APL Wiki . Monte carlo simulation Estimate Pi with 10,000 pairs of random numbers: Try it now! { 4 \u00d7 ( + \u233f \u00f7\u2262 ) 1 > 0.5 * \u2368 + / 2 * \u2368 ? \u2375 2 \u2374 0 0 } 10000 3.1456 Regex like you've never seen Convert what you say into what your dog Rex hears: Try it now! Rex \u2190 'rex' '\\w' \u2395R '\\0' '*' \u2360 1 Rex 'Rex, I told you not to do that! Now, Rex, go and wait outside' Rex , * **** *** *** ** ** ****! ***, Rex , ** *** **** ******* Swap two substrings: Try it now! 'ab' 'ra' \u2395R 'ra' 'ab' \u22a2 'abracadabra' raabcadraab A powerful date time converter: Try it now! now \u2190 1613552859 \u235d Unix Timestamp \u235d 1200\u2336 is experimental 'Dddd Doo Mmmm YYYY hh:mm' ( 1200 \u2336 ) 20 1 \u2395DT now \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Wednesday 17 th February 2021 09 : 07 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Quick and dirty examples"},{"location":"language/examples/#quick-and-dirty-examples","text":"See more on the APL Wiki . Monte carlo simulation Estimate Pi with 10,000 pairs of random numbers: Try it now! { 4 \u00d7 ( + \u233f \u00f7\u2262 ) 1 > 0.5 * \u2368 + / 2 * \u2368 ? \u2375 2 \u2374 0 0 } 10000 3.1456 Regex like you've never seen Convert what you say into what your dog Rex hears: Try it now! Rex \u2190 'rex' '\\w' \u2395R '\\0' '*' \u2360 1 Rex 'Rex, I told you not to do that! Now, Rex, go and wait outside' Rex , * **** *** *** ** ** ****! ***, Rex , ** *** **** ******* Swap two substrings: Try it now! 'ab' 'ra' \u2395R 'ra' 'ab' \u22a2 'abracadabra' raabcadraab A powerful date time converter: Try it now! now \u2190 1613552859 \u235d Unix Timestamp \u235d 1200\u2336 is experimental 'Dddd Doo Mmmm YYYY hh:mm' ( 1200 \u2336 ) 20 1 \u2395DT now \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Wednesday 17 th February 2021 09 : 07 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Quick and dirty examples"},{"location":"language/paradigms/","text":"Programming Pardigms A programming paradigm is a style or method of programming characterised by the main features or constructs used. This page describes and compares the paradigms available in Dyalog. It is not an academic or authoratative classification of paradigms. Array-oriented This is one ingredient in the secret sauce of APL. In the most trivial sense, basic APL operations can be compared to SQL statements. names _ ages \u235d A list of names stacked on top of a list of corresponding ages \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Alice \u2502 Bob \u2502 Charlie \u2502 David \u2502 Ellie \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 22 \u2502 5 \u2502 26 \u2502 30 \u2502 12 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 names \u233f\u2368 ages > 15 \u235d Select names where age is greater than 15 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Alice \u2502 Charlie \u2502 David \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 How does this work? Operations work on whole arrays in a consistent manner, so we can compare two numbers as easily as many: 22 > 15 \u235d 1 for yes, 0 for no 1 ages > 15 \u235d This is a list of Booleans 1 0 1 1 0 The function replicate ( \u237a/\u2375 ), when used with Booleans (1s and 0s), is called compress . Here we are using compress-first ( \u237a\u233f\u2375 ) to be more consistent with leading axis theory . 1 0 1 1 0 \u233f 'ABCDE' ACD Dyalog allows you to mix and match the other styles of programming to fit your use case. Procedural Traditional APL code often has this flavour. This is probably most relatable to people who have a traditional computer science background, and learned a language like C or Python . In procedural programming, you decompose a problem into the smallest steps that you know how to express to the computer, and then you tell the computer do this then do this then do this other thing . It is easily compared to a cooking recipe: add flour , add water , mix together to make a dough , fry the dumplings . \u2207 grps RaiseBy pcnt [ 1 ] salaries [ \u2378 groups \u220a grps ] \u00d7 \u2190 1 + pcnt \u00f7 100 \u2207 Object-oriented In this model, all of the key entities are objects . These are not physical objects like a table or a book, but they are conceptually like objects. You can define a class of object, like a dog or a bird . You can then define some properties and methods for objects of that class, like dogs have legs and birds have wings. Dogs go woof while birds go tweet . You can then define classes which use others as a base. So you can define Class Instance Property Method Dog Golden Retriever Legs Woof Dog Cocker Spaniel Legs Woof Bird Parakeet Wings Tweet Bird Sparrow Wings Tweet See our guide on Object Oriented Programming for APL Programmers . Or if you haven't the time, Object Oriented Programming for Impatient APL Programmers . Functional In APL terminology, a function is a thing with 3=\u2395NC nameclass 3 . What is Functional Programming? John Scholes and Roger Hui at the Dyalog '11 User Meeting In contrast to our procedural examplel above , pure functional programming would insist that our functions have no side effects. Raise \u2190 { \u235d \u237a: (groups)(salaries) \u235d \u2375: (groups to raise)(percentage) \u235d \u2190: salaries of groups raised by percentage ( g s ) \u2190 \u237a ( r p ) \u2190 \u2375 ( 1 + p \u00f7 100 ) \u00d7 @ ( \u2378 g \u220a r ) \u22a2 s } Often times, the array-oriented approach and the functional approach yield similar encodings of the same solution. One key difference between functional programming and array-oriented programming is that while functional programming focuses on the composition of pure functions. This contrast is exemplified by two ways to write code which takes the first four words in a text vector. In a functional approach, we define functions which perform each step of Split character vector into a nested vector of character vectors . Take the first four words Join our list of four words into a single, non-nested character vector. SplitWords \u2190 ' ' \u2218 ( \u2260\u2286\u22a2 ) Take4 \u2190 4 \u2218 \u2191 Join \u2190 1 \u2218 \u2193 \u2364 \u220a ' ' \u2218 , \u00a8 Join Take4 SplitWords 'here are four words and here are five more' here are four words In the traditional APL approach, the main focus is on the transformation of data from one stage to the next. text \u2190 'here are four words and here are five more' ' ' = text 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 + \\ ' ' = text 0 0 0 0 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 7 7 7 7 7 8 8 8 8 8 4 >+ \\ ' ' = text 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 text \u233f\u2368 4 >+ \\ ' ' = text here are four words The advantage in the functional case is that the functions we create should be useful for solving other problems as well. The advantage in the array-oriented case is that not only are we making the best use of the core primitive functions and operators, but we are use flat arrays . Using flat arrays Using the core primitives From step to step, each transformation can be used for a different purpose.","title":"Programming Pardigms"},{"location":"language/paradigms/#programming-pardigms","text":"A programming paradigm is a style or method of programming characterised by the main features or constructs used. This page describes and compares the paradigms available in Dyalog. It is not an academic or authoratative classification of paradigms.","title":"Programming Pardigms"},{"location":"language/paradigms/#array-oriented","text":"This is one ingredient in the secret sauce of APL. In the most trivial sense, basic APL operations can be compared to SQL statements. names _ ages \u235d A list of names stacked on top of a list of corresponding ages \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Alice \u2502 Bob \u2502 Charlie \u2502 David \u2502 Ellie \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 22 \u2502 5 \u2502 26 \u2502 30 \u2502 12 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 names \u233f\u2368 ages > 15 \u235d Select names where age is greater than 15 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Alice \u2502 Charlie \u2502 David \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 How does this work? Operations work on whole arrays in a consistent manner, so we can compare two numbers as easily as many: 22 > 15 \u235d 1 for yes, 0 for no 1 ages > 15 \u235d This is a list of Booleans 1 0 1 1 0 The function replicate ( \u237a/\u2375 ), when used with Booleans (1s and 0s), is called compress . Here we are using compress-first ( \u237a\u233f\u2375 ) to be more consistent with leading axis theory . 1 0 1 1 0 \u233f 'ABCDE' ACD Dyalog allows you to mix and match the other styles of programming to fit your use case.","title":"Array-oriented"},{"location":"language/paradigms/#procedural","text":"Traditional APL code often has this flavour. This is probably most relatable to people who have a traditional computer science background, and learned a language like C or Python . In procedural programming, you decompose a problem into the smallest steps that you know how to express to the computer, and then you tell the computer do this then do this then do this other thing . It is easily compared to a cooking recipe: add flour , add water , mix together to make a dough , fry the dumplings . \u2207 grps RaiseBy pcnt [ 1 ] salaries [ \u2378 groups \u220a grps ] \u00d7 \u2190 1 + pcnt \u00f7 100 \u2207","title":"Procedural"},{"location":"language/paradigms/#object-oriented","text":"In this model, all of the key entities are objects . These are not physical objects like a table or a book, but they are conceptually like objects. You can define a class of object, like a dog or a bird . You can then define some properties and methods for objects of that class, like dogs have legs and birds have wings. Dogs go woof while birds go tweet . You can then define classes which use others as a base. So you can define Class Instance Property Method Dog Golden Retriever Legs Woof Dog Cocker Spaniel Legs Woof Bird Parakeet Wings Tweet Bird Sparrow Wings Tweet See our guide on Object Oriented Programming for APL Programmers . Or if you haven't the time, Object Oriented Programming for Impatient APL Programmers .","title":"Object-oriented"},{"location":"language/paradigms/#functional","text":"In APL terminology, a function is a thing with 3=\u2395NC nameclass 3 . What is Functional Programming? John Scholes and Roger Hui at the Dyalog '11 User Meeting In contrast to our procedural examplel above , pure functional programming would insist that our functions have no side effects. Raise \u2190 { \u235d \u237a: (groups)(salaries) \u235d \u2375: (groups to raise)(percentage) \u235d \u2190: salaries of groups raised by percentage ( g s ) \u2190 \u237a ( r p ) \u2190 \u2375 ( 1 + p \u00f7 100 ) \u00d7 @ ( \u2378 g \u220a r ) \u22a2 s } Often times, the array-oriented approach and the functional approach yield similar encodings of the same solution. One key difference between functional programming and array-oriented programming is that while functional programming focuses on the composition of pure functions. This contrast is exemplified by two ways to write code which takes the first four words in a text vector. In a functional approach, we define functions which perform each step of Split character vector into a nested vector of character vectors . Take the first four words Join our list of four words into a single, non-nested character vector. SplitWords \u2190 ' ' \u2218 ( \u2260\u2286\u22a2 ) Take4 \u2190 4 \u2218 \u2191 Join \u2190 1 \u2218 \u2193 \u2364 \u220a ' ' \u2218 , \u00a8 Join Take4 SplitWords 'here are four words and here are five more' here are four words In the traditional APL approach, the main focus is on the transformation of data from one stage to the next. text \u2190 'here are four words and here are five more' ' ' = text 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 + \\ ' ' = text 0 0 0 0 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 7 7 7 7 7 8 8 8 8 8 4 >+ \\ ' ' = text 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 text \u233f\u2368 4 >+ \\ ' ' = text here are four words The advantage in the functional case is that the functions we create should be useful for solving other problems as well. The advantage in the array-oriented case is that not only are we making the best use of the core primitive functions and operators, but we are use flat arrays . Using flat arrays Using the core primitives From step to step, each transformation can be used for a different purpose.","title":"Functional"}]}