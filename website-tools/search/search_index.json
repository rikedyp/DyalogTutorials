{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tools and Interface Catalogue","text":"<p>Repositories in  Dyalog are maintained and supported by Dyalog. Other repositories are maintained by their respective owners.</p>"},{"location":"#application-development-and-deployment","title":"Application Development and Deployment","text":"Tool Description Documentation Windows IDE Write, run and debug Dyalog applications on Microsoft Windows  Dyalog for Microsoft Windows UI Guide RIDE The recommended IDE for macOS and Linux.Remotely connect to an interpreter over a network on any platform  RIDE User Guide Link Save APL source in text files to integrate with external code editors and source code management software  Link User Guide Docker Run Dyalog and deploy applications using Docker containers  Dyalog on Docker"},{"location":"#web-communications","title":"Web communications","text":"Tool Description Documentation Jarvis Expose APL functions as a JSON or REST web services  Jarvis User Guide HttpCommand Make HTTP requests to access web data and services  HttpCommand User Guide HttpUtils Compose and manipulate HTTP messages  Code Libraries Reference Guide Conga TCP/IP communications library  Conga User Guide aplssh Start and manage SSH sessions from APL using libssh2  Dyalog/aplssh SAWS SOAP-based Web Service framework  SAWS User Guide"},{"location":"#file-handling-and-data-processing","title":"File handling and data processing","text":"Tool Description Documentation SQAPL Interface to ODBC data sources (SQL databases)  SQL Interface Guide vecdb A very simple column-store management system  Dyalog/vecdb \u2395CSV Read data from CSV files and text as APL arrays; write APL arrays to CSV format and files  Comma Separated Values \u2395JSON Convert between APL namespaces and JSON text  JSON Convert \u2395XML Convert between a special APL array format and XML text  XML Convert \u2395MAP Treat files on disk as APL arrays  Map File loaddata.dws Example workspace with functions to load and save data from SQL, CSV, Excel and XML data sources <code>)LOAD loaddata</code>"},{"location":"#external-language-interfaces-and-standard-libraries","title":"External language interfaces and standard libraries","text":"Tool Description Documentation \u2395NA Interface to compiled libraries (.dll, .so, .dylib, .a), for example those written in C/C++  Name Association RSConnect R language interface with Rserve  kimmolinna/rsconnect Math Interface to LAPACK and FFTW to compute eigenvalues, eigenvectors and Fast Fourier Transforms  Dyalog/Math Py'n'APL Access python code from APL and vice versa  Dyalog/pynapl .NET Create and use instances of .NET classes.Recent versions of cross-platform .NET are referred to as \".NET Core\" in the Dyalog documentation.  .NET Core Interface Guide Comparison of .NET Core/Framework Interfaces .NET Framework Create and use instances of .NET classes.Define new .NET classes in Dyalog APL that can be used from other .NET languages such as C#.  Dyalog for Microsoft Windows .NET Framework Interface Guide Microsoft OLE Control Microsoft Office and other applications from Dyalog"},{"location":"#gui-and-graphics","title":"GUI and graphics","text":"Tool Description Documentation EasyGUI Lightweight utility library for creating simple cross-platform graphical user interfaces  JoshDavid/EasyGUI Dyalog User Interface (DUI) Successor of the MiServer web server framework. Write GUI applications in APL and deploy them either as stand-alone applications using HTMLRenderer or serve them as websites and web applications accessible via a web browser.  Dyalog/DUI MiServer Website (samples and documentation) sharpplot.dws Graphing library for data visualisation  sharpplot.com  Selenium Automate the use of web browsers using using Selenium WebDriver under Microsoft Windows  Driving Selenium from Dyalog APL HTMLRenderer GUI object for rendering HTML, CSS and JavaScript using the . Create cross-platform graphical user interfaces.  HTMLRenderer User Guide HTMLRenderer User Guide"},{"location":"#asynchronous-programming","title":"Asynchronous programming","text":"Tool Description Documentation Spawn The Spawn operator <code>&amp;</code> is a lightweight method for doing multiple time-consuming (but not compute-heavy) tasks in parallel.  Spawn Futures and Isolates Execute code in parallel CPU threads  Parallel Language Features Guide .NET Tasks The .NET Task Class can be used directly from Dyalog APL using the .NET interface.  .NET Core Interface Guide Dyalog for Microsoft Windows .NET Framework Interface Guide Comparison of .NET Core/Framework Interfaces"},{"location":"#process-management","title":"Process management","text":"Tool Description Documentation APLProcess Launch and manage processes from within APL  Code Libraries Reference Guide - Core Library aplservice.dws Template for running a Dyalog application as a Microsoft Windows service  Dyalog for Microsoft Windows Installation and Configuration Guide"},{"location":"#apl-system-migration","title":"APL system migration","text":"Tool Description Documentation Workspace Transfer Exchange code between APL systems  APL Workspace Transfer Guide  APLX Tools to help migrate from APLX to Dyalog  APL Workspace Transfer Guide"},{"location":"application-development/","title":"Application Development and Deployment","text":"<p>Dyalog's Integrated Development Environments allow you to interactively use APL to develop and debug applications.</p> <p>On all platforms, Dyalog includes an Integrated Development Environment (IDE) to enable the interactive use of the APL notation to explore data, discover algorithms and create solutions. Using the IDE, the user can create an application through experimentation and easily diagnose problems, resolve issues and resume work. The IDE provides editors for functions and classes, and a tracer which allows the setting of break points, watch points, and full edit-and-resume capabilities.</p> <p>The advanced user can enhance the IDE through User Commands. As part of the standard offering, Dyalog provides user commands that can, for example, interface to external source code management systems and search, replace and refactor code in the active workspace or in external code; you can further extend the IDE by implementing your own user commands.</p>"},{"location":"application-development/#remote-ide-ride","title":"Remote IDE (RIDE)","text":"<p> RIDE User Guide  Introductory tutorial - Mastering Dyalog APL Chapter 2  Dyalog/RIDE</p> <p>The RIDE is a cross-platform, graphical development environment capable of producing a rich user experience on a variety of platforms. It can be run on macOS, Linux and Microsoft Windows, and can be used from any one of these platforms as a front end for Dyalog versions from 14.1 onwards. The RIDE comes together with installations of Dyalog for macOS, but must be installed separately on Linux and Microsoft Windows.</p> <p>It can also be used to connect to remote interpreters over a network. The RIDE and connected Dyalog interpreters do not need to be running on the same device, the same type of device or even on the same continent. From Dyalog version 17.0, the RIDE can be served from the host interpreter by using the configuration parameter <code>RIDE_INIT=http:&lt;IP address&gt;:&lt;port&gt;</code> and accessed from a compatible web browser.</p>"},{"location":"application-development/#dyalog-ide-for-microsoft-windows","title":"Dyalog IDE for Microsoft Windows","text":"<p> Dyalog for Microsoft Windows UI Guide  Introductory tutorial - Mastering Dyalog APL Chapter 2 </p> <p>The RIDE is now the recommended IDE for macOS, AIX and Linux users. However, our native Microsoft Windows development environment remains the richest environment for the development of APL applications. Over the years, the Windows IDE has taken advantage of the Windows GUI to provide a Workspace Explorer, integrated search and replace tools, a language bar, tools for debugging GUI applications, an editor for nested arrays and integrated charting of data. Until the RIDE catches up, the classical Windows IDE is expected to remain the tool of choice for pure Windows development.</p>"},{"location":"application-development/#text-based-tty-ide","title":"Text-based (TTY) IDE","text":"<p> Dyalog for UNIX UI Guide - Driving the Dyalog APL tty version</p> <p>The original interface to Dyalog is a UNIX (or VT-100) style terminal session. Despite only having a fixed-size screen full of characters, this interface does provide all of the interactive functionality mentioned in the introduction. We continue to provide this interface for use in situations where no GUI is available or where developers prefer the retro look!</p>"},{"location":"application-development/#vscode-extensions","title":"VSCode extensions","text":"<p> APL Language extension  APL Language Server Client extension</p> <p>OptimaSystems maintain VSCode extensions which provide support for Dyalog and the APL language.</p>"},{"location":"application-development/#deploy-with-docker-containers","title":"Deploy with Docker containers","text":"<p> Video: Dyalog's Docker Containers // Morten Kromberg // Dyalog '20 </p> <p>Containers provide a consistent environment across different machines and operating systems. The effect is similar to that of virtual machines, but more lightweight and efficient.</p> <p></p> <p>With Docker containers you can:</p> <ul> <li>deploy easily to desktop, servers or in the cloud.</li> <li>package software and its dependencies in a standardised way.</li> <li>test your application in an environment similar to that in which it will be deployed.</li> <li>have your users obtain your software and its dependencies, ready to run, with a single command.</li> <li>deploy your application to the cloud and scale it easily with systems such as kubernetes to meet demand as needed.</li> </ul> <p>Read the docker website to learn more about Docker containers and images.</p> <p>Dyalog provides pre-made containers for:</p> <ul> <li>The Dyalog Interpreter</li> <li>The Jarvis web service framework</li> <li>Dyalog Jupyter Notebooks</li> </ul> <p>Including support for interactive debugging using the Remote IDE:</p> <pre><code>docker run -e RIDE_INIT=serve:*:4502 -p 4502:4502 dyalog/dyalog\n</code></pre> <p>Access from RIDE in a web browser:</p> <pre><code>docker run -e RIDE_INIT=http:*:8888 -p 8888:8888 dyalog/dyalog\n</code></pre>"},{"location":"asynchronous-programming/","title":"Asynchronous Programming","text":"<p>This page shows constructs which can be used to explicitly manage asynchronous, concurrent execution of code.</p> <p>More detailed discussion about the potential for automatic parallelisation and the use of explicit parallelisation is given in the document on parallel language features.</p>"},{"location":"asynchronous-programming/#the-spawn-operator","title":"The Spawn Operator","text":"<p> Mastering Dyalog APL section 11.12  Spawn documentation </p> <p>The Spawn operator <code>&amp;</code> is a lightweight method for doing multiple time-consuming (but not compute-heavy) tasks in parallel. Examples of tasks which may benefit from this type of parallel execution include web scraping and database operations.</p>"},{"location":"asynchronous-programming/#futures-and-isolates","title":"Futures and Isolates","text":"<p> Blog post: Isolated Mandelbrot Set Explorer  Parallel Language Features </p> <p>Futures and isolates are a mechanism for executing functions in parallel, allowing a program to take advantage of multiple cores or processors. The developer can declare which parts of an application should be run in separate CPU threads.</p> <p>Examples of tasks which may benefit from this type of multi-core parallel execution include data processing, financial calculations and scientific simulations. Tasks will benefit when the compute time for running sub-tasks is greater than the time to set up new isolates and transfer data between them.</p> <p>An isolate is a namespace within which all execution is asynchronous relative to the main programme. Any reference to a function or variable within an isolate immediately returns a future, a special type of value which can be passed around as an argument or an element of an array while the calculation is ongoing. Execution of the main programme will automatically block until the asynchronous call completes if an expressions is encountered which requires the actual value, if the asynchronous computation has not completed.</p>"},{"location":"asynchronous-programming/#net-tasks","title":".NET Tasks","text":"<p>The .NET Task Class can be used directly from Dyalog APL using the .NET interface.</p>"},{"location":"asynchronous-programming/#experimental-features","title":"Experimental Features","text":"<p> 2022 Conference Edition README  2022 Conference Edition Part 3a - Future(s) // John Daintree // Dyalog '22  2022 Conference Edition Part 3b - Future(s) // John Daintree // Dyalog '22' </p> <p>The 2022 Conference Edition of the Dyalog interpreter includes experimental functionality, including a unifying interface for managing the asynchronous running of functions using any of the available mechanisms.</p>"},{"location":"external-language-interfaces-standard-libraries/","title":"External Language Interfaces and Standard Libraries","text":""},{"location":"external-language-interfaces-standard-libraries/#net","title":".NET","text":"<p> .NET Core Interface Guide  Dyalog for Microsoft Windows .NET Framework Interface Guide  Comparison of .NET Core/Framework Interfaces </p> <p>Whether you are using the older Microsoft.NET framework for Windows or the new open-source .NET version, Dyalog APL can both call useful .NET libraries to perform activities like encryption and compression - and be integrated as a component within .NET frameworks like ASP.NET Core.</p> <p>Dyalog\u2019s .NET bridge automatically converts APL arrays to and from .NET types and makes it possible to hook APL functions up to .NET events. APL classes can be exported as .NET assemblies that can be consumed by frameworks and programmes written in other .NET languages like C# and F#.</p> <p>To use .NET functions and namespaces, set <code>\u2395USING</code> and create an instance of a .NET class with <code>\u2395NEW</code>.</p> <pre><code>      \u2395USING\u2190'System'\nmydt \u2190 \u2395NEW DateTime (2008 4 30)\nTimeZone.CurrentTimeZone.StandardName\nGMT Standard Time\n</code></pre>"},{"location":"external-language-interfaces-standard-libraries/#python-pynapl","title":"Python (Py'n'APL)","text":"<p> Dyalog/pynapl  Dyalog Webinar: Summer Intern Show  Video: Python + APL = Py'n'APL at the Dyalog '22 User Meeting</p> <p>Call APL functions from Python, and call Python functions. Leverage the vast ecosystem of packages to solve well known tasks.</p> <p>Py'n'APL can automatically convert between Python and APL data types, and converts Python iterable objects to APL vectors.</p>"},{"location":"external-language-interfaces-standard-libraries/#r-language-rsconnect","title":"R language (RSConnect)","text":"<p> kimmolinna/rsconnect</p> <p>Call R functions from APL using Rserve.</p>"},{"location":"external-language-interfaces-standard-libraries/#microsoft-office-ole-client","title":"Microsoft Office (OLE Client)","text":"<p> Chapter Q, Section 2 of Mastering Dyalog APL  Chapter 9 of the Dyalog for Microsoft Windows Interface Guide  Article: Charting the APL/Excel Waters  Dyalog Webinar: APL and Microsoft Excel </p> <p>OLE is a Microsoft technology which can be used to interface with Microsoft Office products, including Excel, PowerPoint and Word. The Dyalog OLE bridge is only on Microsoft Windows.</p> <p>Here is a quick example to open a connection to Excel, create a workbook and add data to it.</p> <pre><code>      XL\u2190\u2395NEW'OLEClient'(\u2282'ClassName' 'Excel.Application')\nXL.Visible\u21901\nXL.Workbooks.Add\u236c\nXL.ActiveWorkbook.Sheets[1].Name\nSheet1\nXL.ActiveWorkbook.Sheets[1].Range[\u2282'A1:A5'].Value2\u2190\u236a\u23735\nXL.ActiveWorkbook.Sheets[\u2282'Sheet1'].Range[\u2282'B1:B5'].Value2\u2190\u236a,\u00a8'ABCDE'\n</code></pre>"},{"location":"external-language-interfaces-standard-libraries/#lapack","title":"LAPACK","text":"<p> Dyalog/Math</p> <p>The <code>Eigen</code> function in the <code>Math</code> library uses the C library LAPACK (Linear Algebra Package).</p>"},{"location":"external-language-interfaces-standard-libraries/#fftw","title":"FFTW","text":"<p> Dyalog/Math</p> <p>The <code>Fourier</code> function in the <code>Math</code> library uses the C library FFTW (Fastest Fourier Transform in the West).</p>"},{"location":"external-language-interfaces-standard-libraries/#compiled-libraries-interface-na","title":"Compiled libraries interface (<code>\u2395NA</code>)","text":"<p>The Name Association function \u2395NA provides access from APL to compiled functions within a library. </p> <p> Online documentation for Name Association \u2395NA</p> <p>A library is implemented according to the operating system as follows:</p> <ul> <li>a Dynamic Link Library (DLL) under Windows</li> <li>a Shared Library (.so or .dylib) under Linux and macOS</li> <li>a static library (.a) under AIX</li> </ul> <p>A compiled library is a collection of functions typically written in C (or C++) each of which may take arguments and return a result.</p> <p>Input and output data types must be explicitly declared.</p>"},{"location":"external-language-interfaces-standard-libraries/#apl-as-a-shared-library","title":"APL as a Shared Library","text":"<p> APL as a Shared Library  The JSON_APL Shared Object</p> <p>An SDK which can be used to package APL code along with the Dyalog interpreter as a shared or static library (.dll, .so, .dylib). This library can then be called by any language which is able to access native shared libraries.</p> <p>The JSON_APL Shared Object offers a plug-and-play shared object with which users can call APL functions by passing character strings. It also functions as an example of using the shared library SDK.</p>"},{"location":"file-handling-data-processing/","title":"File handling and data processing","text":"<p>Reading data into and getting data out of the workspace.</p> <p>There are some in-built tools for importing data from files and the internet. If you are already familiar with python, R or .NET then you can use one of the external language bridges to bring data into APL from files via one of these languages. However, it can be simpler and faster in many cases to use one of the following tools.</p>"},{"location":"file-handling-data-processing/#text-files","title":"Text Files","text":"<p> Read Text File documentation  Write Text File documentation</p> <p><code>\u2395NGET</code> and <code>\u2395NPUT</code> can be used to read and write text files.</p> <pre><code>(\u2282words)\u2395NPUT'data/words.txt'                      \u235d Write words to a unicode text file\n(content encoding newline)\u2190\u2395NGET'data/words.txt'   \u235d Read words from a unicode text file\nwords\u2190(\u2395UCS newline)((~\u220a\u2368)\u2286\u22a2)content               \u235d Split words on each new line \n</code></pre>"},{"location":"file-handling-data-processing/#csv","title":"\u2395CSV","text":"<p> Comma Separated Values documentation  Video: Parsing content from text files using \u2395CSV</p> <p>The Comma Separator Values system function <code>\u2395CSV</code> can read tabular data from <code>.csv</code> files as APL matrices. Here are some features of <code>\u2395CSV</code>:</p> <p>Read data from and write data to files directly  </p> <pre><code>data \u2190 \u2395CSV '/path/to/file.csv'   \u235d Read from file.csv\ndata \u2395CSV '/path/to/file.csv'     \u235d Write to file.csv\n</code></pre> <p>Separate the header (first row) from the rest of the data:</p> <pre><code>(data header) \u2190 \u2395CSV '/path/to/file.csv' \u236c\u00a0\u236c\u00a01\n</code></pre> <p>Treat specific columns of input as numeric or text, depending on the options provided.  </p> <p><pre><code>numeric_if_possible \u2190 \u2395CSV '/path/to/file.csv' \u236c 4\n</code></pre> The <code>4</code> in this example indicates to convert numeric values if possible, and otherwise keep the value as text:</p> <p>Use a separator other than commas, using the \"Separator\" variant option, for example using tabs (<code>\u2395UCS 9</code>) for Tab Separated Values (.tsv).  </p> <pre><code>tsv \u2190 \u2395CSV\u2360'Separator' (\u2395UCS 9)\u22a2'/path/to/file.tsv'\n</code></pre> <p>Read data chunks at a time so as to not fill the workspace, using the \"Records\" variant option.  </p> Example of using the Records variant option <pre><code>    path \u2190 '/path/to/file.csv'    \u235d The file path as simple character vector\nReadCSV10\u2190\u2395CSV\u2360'Records' 10   \u235d A function to read CSV 10 records at a time\ntn\u2190path \u2395NTIE 0               \u235d Tie the file - this locks it from use by other applications\nfirst10 \u2190 ReadCSV10 tn        \u235d Read the first 10 records (rows)\nsecond10 \u2190 ReadCSV10 tn       \u235d Read the next 10\n\u2262\u00a8first10 second10\n10 10\nfirst10 second10\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502\u25021 \u2502JQZUK\u2502\u2502\u250211\u2502DECJM\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25022 \u2502ANPYW\u2502\u2502\u250212\u2502PXPGL\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25023 \u2502WYVSR\u2502\u2502\u250213\u2502SYSCN\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25024 \u2502ZOGOX\u2502\u2502\u250214\u2502EKDPS\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25025 \u2502CXKRS\u2502\u2502\u250215\u2502XCOHA\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25026 \u2502BFTYO\u2502\u2502\u250216\u2502RDAHR\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25027 \u2502VFLAS\u2502\u2502\u250217\u2502KPUTW\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25028 \u2502BAFYD\u2502\u2502\u250218\u2502TPDOD\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u25029 \u2502XPEBP\u2502\u2502\u250219\u2502BGIVA\u2502\u2502\n\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\n\u2502\u250210\u2502UVBFG\u2502\u2502\u250220\u2502IITSO\u2502\u2502\n\u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2395NUNTIE tn                    \u235d Don't forget to untie the file after use!\n</code></pre> <p>If you are reading large tabular data, you can use <code>\u2395MAP</code> to access the data without bringing it all into your workspace, potentially preventing a <code>WS FULL</code> error.</p>"},{"location":"file-handling-data-processing/#json","title":"<code>\u2395JSON</code>","text":"<p> JSON Convert</p> <p>Convert between APL arrays and character vectors (text) in JavaScript Object Notation (JSON) format.</p> <p>Lists can be represented as APL vectors.</p> <pre><code>      1\u2395JSON (1 2 3)'ABCD'\n[[1,2,3],\"ABCD\"]\n</code></pre> <p>Objects can be represented as APL namespaces.</p> <pre><code>      0\u2395JSON '{\"name\":\"David\", \"age\": 42}'\n#.[JSON object]\n</code></pre> <p>Both can be represented as a matrix of depth, name, value and type columns somewhat similar to that used by <code>\u2395XML</code>.</p> <pre><code>      0 (\u2395JSON \u2395OPT'Format' 'M')'[{\"name\":\"David\", \"age\": 42}, {\"name\": \"Sandra\", \"age\": 42}]'\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510\n\u25020\u2502    \u2502      \u25022\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502    \u2502      \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502name\u2502David \u25024\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502age \u250242    \u25023\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25021\u2502    \u2502      \u25021\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502name\u2502Sandra\u25024\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25022\u2502age \u250242    \u25023\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\n</code></pre>"},{"location":"file-handling-data-processing/#xml","title":"<code>\u2395XML</code>","text":"<p> XML Convert documentation</p> <p><code>\u2395XML</code> converts between XML character vectors and a nested matrices of node depth, tag name, value, attribute key/value pairs and markup description columns.</p> <pre><code>      \u2395XML'&lt;name born=\"1920\"&gt;Ken&lt;/name&gt;&lt;name born=\"1925\"&gt;Jean&lt;/name&gt;'\n\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510\n\u25020\u2502name\u2502Ken \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\u25025\u2502\n\u2502 \u2502    \u2502    \u2502\u2502born\u25021920\u2502\u2502 \u2502\n\u2502 \u2502    \u2502    \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\u2502 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2524\n\u25020\u2502name\u2502Jean\u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\u25025\u2502\n\u2502 \u2502    \u2502    \u2502\u2502born\u25021925\u2502\u2502 \u2502\n\u2502 \u2502    \u2502    \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\u2502 \u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\n</code></pre>"},{"location":"file-handling-data-processing/#rs","title":"<code>\u2395R/\u2395S</code>","text":"<p> Search and Replace documentation</p> <p>Search and replace using regular expressions.</p> <p><code>\u2395R</code> and <code>\u2395S</code> are dyadic operators which allow searching text using Pearl Compatible Regular Expressions (PCRE).</p> <p>Dyalog's search and replace accept multiple search and replace strings and/or functions in a single call.</p> <p>Example: Convert what you say into what your dog Rex hears:</p> <pre><code>      Rex \u2190 'rex' 'food' '\\w'\u2395R'\\0' '*'\u23601\nRex 'Rex, I told you not to do that! Now, Rex, go and wait outside'\nRex, * **** *** *** ** ** ****! ***, Rex, ** *** **** *******\n</code></pre>"},{"location":"file-handling-data-processing/#map","title":"<code>\u2395MAP</code>","text":"<p> <code>\u2395MAP</code> documentation.</p> <p><code>\u2395MAP</code> allows you to treat a file on disk as if it were a variable in the workspace. This is useful if you are working with data that cannot fit inside the available workspace memory. One approach might be to read the data in chunks and process one chunk at a time (for example, see the \"Records\" variant option for <code>\u2395CSV</code>). Another approach is to use <code>\u2395MAP</code>.</p> <pre><code>      text \u2190 80 \u00af1 \u2395MAP '/path/to/file.txt'\n</code></pre> <p>You must specify the type according to the Data Representation <code>\u2395DR</code> of the data to be read.</p>"},{"location":"file-handling-data-processing/#binary-files-or-arbitrary-file-types","title":"Binary files or arbitrary file types","text":"<p> Native Files cheat sheet  System Functions Categorised</p> <p>The term \"Native Files\" refers to any type of file on a hard disk. Some system functions beginning <code>\u2395N</code> can be used to read and write files of arbitrary type and format.</p> <pre><code>      tn\u2190'words.txt'\u2395NTIE 0   \u235d Tie the file, locking it from use by other processes\n\u2395\u219010\u2191\u2395NREAD tn 80 \u00af1    \u235d Read the data as Unicode text\nA\nA's\nAA's\n\u2395NUNTIE tn              \u235d Untie the file\n</code></pre>"},{"location":"file-handling-data-processing/#apl-component-files","title":"APL Component files","text":"<p> Chapter N of Mastering Dyalog APL  Component Files Online Documentation  Chapter 5 of Dyalog Programming Reference Guide</p> <p>If it is only APL systems that need to store data, the most convenient and efficient way to store that data is in APL component files. Component files can store any type of APL array, including namespaces.</p>"},{"location":"file-handling-data-processing/#downloading-data-from-the-internet","title":"Downloading data from the internet","text":"<p>See HttpCommand.</p>"},{"location":"file-handling-data-processing/#sql-interface","title":"SQL Interface","text":"<p> SQL Interface Guide</p> <p>SQAPL provides an interface to ODBC-compliant SQL databases including Oracle, Microsoft Access, MySQL, MariaDB and DB2. It contains functions to read, write and manage SQL databases. It is supported on all platforms, although some platforms could incur an additional licence fee for the server component of SQAPL.</p> <p>For quick access to simply read data from or write data to a table, the functions <code>LoadSQL</code> and <code>SaveSQL</code> from the utility workspace <code>loaddata</code> may be all that you need.</p>"},{"location":"web-communications/","title":"Web communications","text":""},{"location":"web-communications/#httpcommand","title":"HttpCommand","text":"<p> HttpCommand online documentation</p> <p>HttpCommand is a utility is designed to make it easy for the APL user to send requests to and receive responses from HTTP servers like web servers and web services. HttpCommand is included with Dyalog APL as a loadable utility.</p> <p>Below is a simple example of making a GET request to a web API:</p> <pre><code>      ]Get HttpCommand   \u235d Use ]Load prior to Dyalog version 18.2\n#.HttpCommand\nresponse \u2190 HttpCommand.Get'https://catfact.ninja/fact'\nresponse.(HttpStatus HttpMessage)\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2510\n\u2502200\u2502OK\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2518\nresponse.Data\n{\"fact\":\"In an average year, cat owners in the United States spend over $2 billion on cat food.\",\"length\":86}\n</code></pre>"},{"location":"web-communications/#jarvis-web-service-framework","title":"Jarvis Web Service Framework","text":"<p> Jarvis online documentation</p> <p>Jarvis allows you to serve up anything from a single APL function up to an entire application as an HTTP/JSON or RESTful web service. Jarvis automatically converts payloads between JSON and APL arrays and can serve static HTTP resources. Jarvis can maintain application session state, with user validation based on HTTP Basic authentication, custom authentication, and/or client-side certificates.</p> <p>TryAPL is an example of an APL web service application based on Jarvis.</p>"},{"location":"web-communications/#conga-tcp-client-and-server-library","title":"Conga TCP Client and Server Library","text":"<p> Conga user guide</p> <p>Conga provides wrappers for listening (server) and client sockets which can, optionally, be made secure using TLS. Sockets can be used to transmit either raw byte streams or entire APL arrays from one process to another. Code samples are provided, showing how to build web servers and clients, a simple FTP client and server and an RPC framework.</p> <p>Higher-level tools like Jarvis and HttpCommand are all built upon Conga, which provides fundamental TCP client and server APIs, with optional web socket support.</p> <p>Conga embeds GnuTLS and supports secure and encrypted communications. APL client and server applications can require and validate peer certificate information. There is also support for Integrated Windows Authentication, enabling identification of users who already logged into a domain controller without re-entering credentials.</p>"},{"location":"web-communications/#aplssh","title":"APLSSH","text":"<p> github.com/Dyalog/aplssh</p> <p>This is a wrapper around the libssh2 library. Currently, it only exposes a small fraction of its functionality. It can execute remote commands, and read and write files.</p>"},{"location":"web-communications/#using-microsoft-net","title":"Using Microsoft .NET","text":"<p>Dyalog can be used with industry-standard Microsoft components in the same way as most other programming languages that integrate with Microsoft .NET:</p> <ul> <li>Dyalog can be used as an ASP.NET scripting language to build web pages under Microsoft IIS.</li> <li>SharePoint WebParts can be developed using Dyalog as a .NET programming language.</li> <li>Microsoft IIS can also serve up Web Services implemented in Dyalog.</li> </ul> <p>See chapters 6 through 9 of the  Dyalog for Microsoft Windows .NET Interface Guide for more information.</p> <p>Dyalog can also be used to power web solutions more indirectly, by acting as a participant in message queuing systems like Windows Communications Foundation / MSMQ \u2013 or any tool that is based on Microsoft .NET.</p>"}]}