{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tools and Interface Catalogue Repositories in Dyalog are maintained and supported by Dyalog. Other repositories are maintained by their respective owners. Application Development and Deployment Tool Description Documentation Windows IDE Write, run and debug Dyalog applications on Microsoft Windows Dyalog for Microsoft Windows UI Guide RIDE The recommended IDE for macOS and Linux. Remotely connect to an interpreter over a network on any platform RIDE User Guide Link Save APL source in text files to integrate with source code management software Link User Guide Docker Run Dyalog and deploy applications using Docker containers Dyalog on Docker Process management and deployment Tool Description Documentation APLProcess Launch and manage processes from within APL Code Libraries Reference Guide - Core Library aplservice.dws Template for running a Dyalog application as a Microsoft Windows service Dyalog for Microsoft Windows Installation and Configuration Guide Futures and Isolates Execute code in parallel CPU threads Parallel Language Features Guide Web communications Tool Description Documentation Jarvis Expose APL functions as a JSON or REST web services HttpCommand Make HTTP requests to access web data and services HttpCommand User Guide HttpUtils Compose and manipulate HTTP messages Code Libraries Reference Guide Conga TCP/IP communications library Conga User Guide FtpClient A passive-mode FTP client aplssh Start and manage SSH sessions from APL using libssh2 Dyalog/aplssh SAWS SOAP-based Web Service framework SAWS User Guide File handling and data processing Tool Description Documentation loaddata.dws Example workspace with functions to load and save data from SQL, CSV, Excel and XML data sources SQAPL Interface to ODBC data sources (SQL databases) SQL Interface Guide vecdb A very simple column-store management system Dyalog/vecdb \u2395CSV Read data from CSV files and text as APL arrays; write APL arrays to CSV format and files Comma Separated Values \u2395JSON Convert between APL namespaces and JSON text JSON Convert \u2395XML Convert between a special APL array format and XML text XML Convert \u2395MAP Treat files on disk as APL arrays to avoid importing data into the workspace Map File External language interfaces and standard libraries Tool Description Documentation \u2395NA Interface to compiled libraries (.dll, .so, .dylib, .a) RSConnect R language interface with Rserve kimmolinna/rsconnect Math Interface to LAPACK and FFTW to compute eigenvalues, eigenvectors and Fast Fourier Transforms Dyalog/Math Py'n'APL Access python code from APL and vice versa Dyalog/pynapl .NET .NET Previously .NET Core Microsoft .NET Framework Microsoft OLE Control Microsoft Office and other applications from Dyalog GUI and graphics Tool Description Documentation DUI EasyGUI Chart Wizard Graph Plotting Library Selenium APL system migration Tool Description Documentation Workspace Transfer APLX","title":"Tools and Interface Catalogue"},{"location":"#tools-and-interface-catalogue","text":"Repositories in Dyalog are maintained and supported by Dyalog. Other repositories are maintained by their respective owners.","title":"Tools and Interface Catalogue"},{"location":"#application-development-and-deployment","text":"Tool Description Documentation Windows IDE Write, run and debug Dyalog applications on Microsoft Windows Dyalog for Microsoft Windows UI Guide RIDE The recommended IDE for macOS and Linux. Remotely connect to an interpreter over a network on any platform RIDE User Guide Link Save APL source in text files to integrate with source code management software Link User Guide Docker Run Dyalog and deploy applications using Docker containers Dyalog on Docker","title":"Application Development and Deployment"},{"location":"#process-management-and-deployment","text":"Tool Description Documentation APLProcess Launch and manage processes from within APL Code Libraries Reference Guide - Core Library aplservice.dws Template for running a Dyalog application as a Microsoft Windows service Dyalog for Microsoft Windows Installation and Configuration Guide Futures and Isolates Execute code in parallel CPU threads Parallel Language Features Guide","title":"Process management and deployment"},{"location":"#web-communications","text":"Tool Description Documentation Jarvis Expose APL functions as a JSON or REST web services HttpCommand Make HTTP requests to access web data and services HttpCommand User Guide HttpUtils Compose and manipulate HTTP messages Code Libraries Reference Guide Conga TCP/IP communications library Conga User Guide FtpClient A passive-mode FTP client aplssh Start and manage SSH sessions from APL using libssh2 Dyalog/aplssh SAWS SOAP-based Web Service framework SAWS User Guide","title":"Web communications"},{"location":"#file-handling-and-data-processing","text":"Tool Description Documentation loaddata.dws Example workspace with functions to load and save data from SQL, CSV, Excel and XML data sources SQAPL Interface to ODBC data sources (SQL databases) SQL Interface Guide vecdb A very simple column-store management system Dyalog/vecdb \u2395CSV Read data from CSV files and text as APL arrays; write APL arrays to CSV format and files Comma Separated Values \u2395JSON Convert between APL namespaces and JSON text JSON Convert \u2395XML Convert between a special APL array format and XML text XML Convert \u2395MAP Treat files on disk as APL arrays to avoid importing data into the workspace Map File","title":"File handling and data processing"},{"location":"#external-language-interfaces-and-standard-libraries","text":"Tool Description Documentation \u2395NA Interface to compiled libraries (.dll, .so, .dylib, .a) RSConnect R language interface with Rserve kimmolinna/rsconnect Math Interface to LAPACK and FFTW to compute eigenvalues, eigenvectors and Fast Fourier Transforms Dyalog/Math Py'n'APL Access python code from APL and vice versa Dyalog/pynapl .NET .NET Previously .NET Core Microsoft .NET Framework Microsoft OLE Control Microsoft Office and other applications from Dyalog","title":"External language interfaces and standard libraries"},{"location":"#gui-and-graphics","text":"Tool Description Documentation DUI EasyGUI Chart Wizard Graph Plotting Library Selenium","title":"GUI and graphics"},{"location":"#apl-system-migration","text":"Tool Description Documentation Workspace Transfer APLX","title":"APL system migration"},{"location":"application-development/","text":"Application Development and Deployment Dyalog's Integrated Development Environments allow you to interactively use APL to develop and debug applications. On all platforms, Dyalog includes an Integrated Development Environment (IDE) to enable the interactive use of the APL notation to explore data, discover algorithms and create solutions. Using the IDE, the user can create an application through experimentation and easily diagnose problems, resolve issues and resume work. The IDE provides editors for functions and classes, and a tracer which allows the setting of break points, watch points, and full edit-and-resume capabilities. The advanced user can enhance the IDE through User Commands. As part of the standard offering, Dyalog provides user commands that can, for example, interface to external source code management systems and search, replace and refactor code in the active workspace or in external code; you can further extend the IDE by implementing your own user commands. Remote IDE (RIDE) RIDE User Guide Introductory tutorial - Mastering Dyalog APL Chapter 2 Dyalog/RIDE The RIDE is a cross-platform, graphical development environment capable of producing a rich user experience on a variety of platforms. It can be run on macOS, Linux and Microsoft Windows, and can be used from any one of these platforms as a front end for Dyalog versions from 14.1 onwards. The RIDE comes together with installations of Dyalog for macOS, but must be installed separately on Linux and Microsoft Windows. It can also be used to connect to remote interpreters over a network. The RIDE and connected Dyalog interpreters do not need to be running on the same device, the same type of device or even on the same continent. From Dyalog version 17.0, the RIDE can be served from the host interpreter by using the configuration parameter RIDE_INIT=http:<IP address>:<port> and accessed from a compatible web browser. Dyalog IDE for Microsoft Windows Dyalog for Microsoft Windows UI Guide Introductory tutorial - Mastering Dyalog APL Chapter 2 The RIDE is now the recommended IDE for macOS, AIX and Linux users. However, our native Microsoft Windows development environment remains the richest environment for the development of APL applications. Over the years, the Windows IDE has taken advantage of the Windows GUI to provide a Workspace Explorer, integrated search and replace tools, a language bar, tools for debugging GUI applications, an editor for nested arrays and integrated charting of data. Until the RIDE catches up, the classical Windows IDE is expected to remain the tool of choice for pure Windows development. Text-based (TTY) IDE Dyalog for UNIX UI Guide - Driving the Dyalog APL tty version The original interface to Dyalog is a UNIX (or VT-100) style terminal session. Despite only having a fixed-size screen full of characters, this interface does provide all of the interactive functionality mentioned in the introduction. We continue to provide this interface for use in situations where no GUI is available or where developers prefer the retro look! VSCode extensions OptimaSystems maintain VSCode extensions which provide support for Dyalog and the APL language. APL Language extension APL Language Server Client extension Deploy with Docker containers Containers provide a consistent environment across different machines and operating systems. The effect is similar to that of virtual machines, but more lightweight and efficient. With Docker containers you can: deploy easily to desktop, servers or in the cloud. package software and its dependencies in a standardised way. test your application in an environment similar to that in which it will be deployed. have your users obtain your software and its dependencies, ready to run, with a single command. deploy your application to the cloud and scale it easily with systems such as kubernetes to meet demand as needed. Read the docker website to learn more about Docker containers and images. Dyalog provides pre-made containers for: The Dyalog Interpreter The Jarvis web service framework Dyalog Jupyter Notebooks Including support for interactive debugging using the Remote IDE . docker run -e RIDE_INIT = serve:*:4502 -p 4502 :4502 dyalog/dyalog Access from RIDE in a web browser: docker run - e RIDE_INIT = http : * : 8888 - p 8888 : 8888 dyalog / dyalog #videos { display: flex; text-align: center; } Dyalog 20: Dyalog's Docker Containers (slides PDF) Dyalog Webinars: Microservices in Dyalog APL","title":"Application Development and Deployment"},{"location":"application-development/#application-development-and-deployment","text":"Dyalog's Integrated Development Environments allow you to interactively use APL to develop and debug applications. On all platforms, Dyalog includes an Integrated Development Environment (IDE) to enable the interactive use of the APL notation to explore data, discover algorithms and create solutions. Using the IDE, the user can create an application through experimentation and easily diagnose problems, resolve issues and resume work. The IDE provides editors for functions and classes, and a tracer which allows the setting of break points, watch points, and full edit-and-resume capabilities. The advanced user can enhance the IDE through User Commands. As part of the standard offering, Dyalog provides user commands that can, for example, interface to external source code management systems and search, replace and refactor code in the active workspace or in external code; you can further extend the IDE by implementing your own user commands.","title":"Application Development and Deployment"},{"location":"application-development/#remote-ide-ride","text":"RIDE User Guide Introductory tutorial - Mastering Dyalog APL Chapter 2 Dyalog/RIDE The RIDE is a cross-platform, graphical development environment capable of producing a rich user experience on a variety of platforms. It can be run on macOS, Linux and Microsoft Windows, and can be used from any one of these platforms as a front end for Dyalog versions from 14.1 onwards. The RIDE comes together with installations of Dyalog for macOS, but must be installed separately on Linux and Microsoft Windows. It can also be used to connect to remote interpreters over a network. The RIDE and connected Dyalog interpreters do not need to be running on the same device, the same type of device or even on the same continent. From Dyalog version 17.0, the RIDE can be served from the host interpreter by using the configuration parameter RIDE_INIT=http:<IP address>:<port> and accessed from a compatible web browser.","title":"Remote IDE (RIDE)"},{"location":"application-development/#dyalog-ide-for-microsoft-windows","text":"Dyalog for Microsoft Windows UI Guide Introductory tutorial - Mastering Dyalog APL Chapter 2 The RIDE is now the recommended IDE for macOS, AIX and Linux users. However, our native Microsoft Windows development environment remains the richest environment for the development of APL applications. Over the years, the Windows IDE has taken advantage of the Windows GUI to provide a Workspace Explorer, integrated search and replace tools, a language bar, tools for debugging GUI applications, an editor for nested arrays and integrated charting of data. Until the RIDE catches up, the classical Windows IDE is expected to remain the tool of choice for pure Windows development.","title":"Dyalog IDE for Microsoft Windows"},{"location":"application-development/#text-based-tty-ide","text":"Dyalog for UNIX UI Guide - Driving the Dyalog APL tty version The original interface to Dyalog is a UNIX (or VT-100) style terminal session. Despite only having a fixed-size screen full of characters, this interface does provide all of the interactive functionality mentioned in the introduction. We continue to provide this interface for use in situations where no GUI is available or where developers prefer the retro look!","title":"Text-based (TTY) IDE"},{"location":"application-development/#vscode-extensions","text":"OptimaSystems maintain VSCode extensions which provide support for Dyalog and the APL language. APL Language extension APL Language Server Client extension","title":"VSCode extensions"},{"location":"application-development/#deploy-with-docker-containers","text":"Containers provide a consistent environment across different machines and operating systems. The effect is similar to that of virtual machines, but more lightweight and efficient. With Docker containers you can: deploy easily to desktop, servers or in the cloud. package software and its dependencies in a standardised way. test your application in an environment similar to that in which it will be deployed. have your users obtain your software and its dependencies, ready to run, with a single command. deploy your application to the cloud and scale it easily with systems such as kubernetes to meet demand as needed. Read the docker website to learn more about Docker containers and images. Dyalog provides pre-made containers for: The Dyalog Interpreter The Jarvis web service framework Dyalog Jupyter Notebooks Including support for interactive debugging using the Remote IDE . docker run -e RIDE_INIT = serve:*:4502 -p 4502 :4502 dyalog/dyalog Access from RIDE in a web browser: docker run - e RIDE_INIT = http : * : 8888 - p 8888 : 8888 dyalog / dyalog #videos { display: flex; text-align: center; } Dyalog 20: Dyalog's Docker Containers (slides PDF) Dyalog Webinars: Microservices in Dyalog APL","title":"Deploy with Docker containers"},{"location":"external-language-interfaces-standard-libraries/","text":"External Language Interfaces and Standard Libraries Compiled libraries interface ( \u2395NA ) The Name Association function \u2395NA provides access from APL to compiled functions within a library. Online documentation for Name Association \u2395NA A library is implemented according to the operating system as follows: a Dynamic Link Library (DLL) under Windows a Shared Library (.so or .dylib) under Linux and macOS a static library (.a) under AIX A compiled library is a collection of functions typically written in C (or C++) each of which may take arguments and return a result. Input and output data types must be explicitly declared. .NET .NET contains a plethora of useful libraries. To use .NET functions and namespaces, set \u2395USING and create an instance of a .NET class with \u2395NEW . \u2395USING \u2190 'System' mydt \u2190 \u2395NEW DateTime ( 2008 4 30 ) TimeZone . CurrentTimeZone . StandardName GMT Standard Time Python (Py'n'APL) R language (RSConnect) Microsoft Office (OLE Client) OLE is a Microsoft technology which can be used to interface with Microsoft Office products, including Excel, PowerPoint and Word. The Dyalog OLE bridge is only on Microsoft Windows. Here is a quick example to open a connection to Excel, create a workbook and add data to it. XL \u2190 \u2395NEW 'OLEClient' ( \u2282 'ClassName' 'Excel.Application' ) XL . Visible \u2190 1 XL . Workbooks . Add \u236c XL . ActiveWorkbook . Sheets [ 1 ] . Name Sheet1 XL . ActiveWorkbook . Sheets [ 1 ] . Range [ \u2282 'A1:A5' ] . Value2 \u2190 \u236a\u2373 5 XL . ActiveWorkbook . Sheets [ \u2282 'Sheet1' ] . Range [ \u2282 'B1:B5' ] . Value2 \u2190 \u236a, \u00a8 'ABCDE' For further information and examples, see: Chapter Q, Section 2 on page 676 of Mastering Dyalog APL Dyalog Webinar: APL and Microsoft Excel Chapter 9 of the Dyalog for Microsoft Windows Interface Guide Charting the APL/Excel Waters","title":"External Language Interfaces and Standard Libraries"},{"location":"external-language-interfaces-standard-libraries/#external-language-interfaces-and-standard-libraries","text":"","title":"External Language Interfaces and Standard Libraries"},{"location":"external-language-interfaces-standard-libraries/#compiled-libraries-interface-na","text":"The Name Association function \u2395NA provides access from APL to compiled functions within a library. Online documentation for Name Association \u2395NA A library is implemented according to the operating system as follows: a Dynamic Link Library (DLL) under Windows a Shared Library (.so or .dylib) under Linux and macOS a static library (.a) under AIX A compiled library is a collection of functions typically written in C (or C++) each of which may take arguments and return a result. Input and output data types must be explicitly declared.","title":"Compiled libraries interface (\u2395NA)"},{"location":"external-language-interfaces-standard-libraries/#net","text":".NET contains a plethora of useful libraries. To use .NET functions and namespaces, set \u2395USING and create an instance of a .NET class with \u2395NEW . \u2395USING \u2190 'System' mydt \u2190 \u2395NEW DateTime ( 2008 4 30 ) TimeZone . CurrentTimeZone . StandardName GMT Standard Time","title":".NET"},{"location":"external-language-interfaces-standard-libraries/#python-pynapl","text":"","title":"Python (Py'n'APL)"},{"location":"external-language-interfaces-standard-libraries/#r-language-rsconnect","text":"","title":"R language (RSConnect)"},{"location":"external-language-interfaces-standard-libraries/#microsoft-office-ole-client","text":"OLE is a Microsoft technology which can be used to interface with Microsoft Office products, including Excel, PowerPoint and Word. The Dyalog OLE bridge is only on Microsoft Windows. Here is a quick example to open a connection to Excel, create a workbook and add data to it. XL \u2190 \u2395NEW 'OLEClient' ( \u2282 'ClassName' 'Excel.Application' ) XL . Visible \u2190 1 XL . Workbooks . Add \u236c XL . ActiveWorkbook . Sheets [ 1 ] . Name Sheet1 XL . ActiveWorkbook . Sheets [ 1 ] . Range [ \u2282 'A1:A5' ] . Value2 \u2190 \u236a\u2373 5 XL . ActiveWorkbook . Sheets [ \u2282 'Sheet1' ] . Range [ \u2282 'B1:B5' ] . Value2 \u2190 \u236a, \u00a8 'ABCDE' For further information and examples, see: Chapter Q, Section 2 on page 676 of Mastering Dyalog APL Dyalog Webinar: APL and Microsoft Excel Chapter 9 of the Dyalog for Microsoft Windows Interface Guide Charting the APL/Excel Waters","title":"Microsoft Office (OLE Client)"},{"location":"file-handling-data-processing/","text":"File handling and data processing Reading data into and getting data out of the workspace. There are some in-built tools for importing data from files and the internet. If you are already familiar with python , R language or .NET then you can use one of the external language bridges to bring data into APL from files via one of these languages. However, it will usually be simpler and faster in the long term to become familiar with the following tools. Binary files or arbitrary file types The term \"Native Files\" refers to any type of file on a hard disk. These can be text or media files, or even executable files. Usually we are interested in various kinds of text files; the rest of this page lists system functions for handling these, including \u2395NGET . For files of arbitrary type and format, some system functions beginning \u2395N . First, we must tie the file, locking it from use by other applications. \u2395NTIE returns a tie number. tn \u2190 '/path/to/file' \u2395NTIE 0 This is a quick summary. For more details see the Native Files cheat sheet and system functions and variables A-Z in the online documentation. In the chapter on selecting from arrays there was an example of reading a text file using \u2395NGET . Before Dyalog version 15.0, reading text files required a couple of extra steps. Some \u2395N... native file functions are general and can be used to read and write any type of file. As a simple example, here we tie the file words.txt , read the data and store it in a variable, and finally untie the file. Note For multi-user systems, take care to set appropriate file access permissions when using \u2395NCREATE , \u2395NTIE and \u2395NLOCK . tn \u2190 'assets/words.txt' \u2395NTIE 0 \u2395 \u2190 10 \u2191 words \u2190 ( \u2395UCS 10 )( \u2260\u2286\u22a2 ) \u2395NREAD tn 82 ( \u2395NSIZE tn ) 0 \u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 A \u2502 A 's\u2502AA' s \u2502 AB 's\u2502ABM' s \u2502 AC 's\u2502ACTH' s \u2502 AI 's\u2502AIDS' s \u2502 AM ' s \u2502 \u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2395NUNTIE\u2395NNUMS Text Files Generally the \u2395N... family of system functions are for reading and writing native files as described in the documentation. \u2395NGET and \u2395NPUT are useful for reading and writing text files without having to tie and untie them. ( \u2282 words ) \u2395NPUT 'data/words.txt' \u235d Write words to a unicode text file ( content encoding newline ) \u2190 \u2395NGET 'data/words.txt' \u235d Read words from a unicode text file words \u2190 ( \u2395UCS newline )(( ~\u220a \u2368 ) \u2286\u22a2 ) content \u235d Split words on each new line Tabular data For small amounts of data, it is usually quickest and easiest to use raw APL with arrays. Nested matrices offer a convenient format comparable to a spreadsheet (in fact, they can be directly imported from Excel or CSV files). Inverted tables take the idea of column store and implement them in APL for great search and retrieval performance. \u2395 CSV The Comma Separator Values system function \u2395CSV can read tabular data from .csv files as APL matrices, Comma separated values are a very common and convenient . While we encourage you to read the documentation for a full description, here is an overview of features of \u2395CSV : Read data from and write data to files directly data \u2190 \u2395CSV '/path/to/file.csv' Separate the header (first row) from the rest of the data ( data header ) \u2190 \u2395CSV '/path/to/file.csv' \u236c \u236c 1 Treat specific columns of input as numeric or text, depending on the options provided. The 4 here indicates to convert numeric values if possible, else keep the value as text. numeric_if_possible \u2190 \u2395CSV '/path/to/file.csv' \u236c 4 Use a separator other than commas, using the \"Separator\" variant option, for example using tabs ( \u2395UCS 9 ) for Tab Separated Values (.tsv). tsv \u2190 \u2395CSV \u2360 'Separator' ( \u2395UCS 9 ) \u22a2 '/path/to/file.csv' Read data chunks at a time so as to not fill the workspace, using the \"Records\" variant option. Example path \u2190 '/path/to/file.csv' \u235d The file path as simple character vector ReadCSV10 \u2190 \u2395CSV \u2360 'Records' 10 \u235d A function to read CSV 10 records at a time tn \u2190 path \u2395NTIE 0 \u235d Tie the file - this locks it from use by other applications first10 \u2190 ReadCSV10 tn \u235d Read the first 10 records (rows) second10 \u2190 ReadCSV10 tn \u235d Read the next 10 \u2262 \u00a8 first10 second10 10 10 first10 second10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 1 \u2502 JQZUK \u2502\u2502\u2502 11 \u2502 DECJM \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 2 \u2502 ANPYW \u2502\u2502\u2502 12 \u2502 PXPGL \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 3 \u2502 WYVSR \u2502\u2502\u2502 13 \u2502 SYSCN \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 4 \u2502 ZOGOX \u2502\u2502\u2502 14 \u2502 EKDPS \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 5 \u2502 CXKRS \u2502\u2502\u2502 15 \u2502 XCOHA \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 6 \u2502 BFTYO \u2502\u2502\u2502 16 \u2502 RDAHR \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 7 \u2502 VFLAS \u2502\u2502\u2502 17 \u2502 KPUTW \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 8 \u2502 BAFYD \u2502\u2502\u2502 18 \u2502 TPDOD \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 9 \u2502 XPEBP \u2502\u2502\u2502 19 \u2502 BGIVA \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 10 \u2502 UVBFG \u2502\u2502\u2502 20 \u2502 IITSO \u2502\u2502 \u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2395NUNTIE tn \u235d Don't forget to untie the file after use! If you are reading large tabular data, you can use \u2395MAP to access the data without bringing it all into your workspace, potentially preventing a WS FULL error. Parsing content from text files using Dyalog APL's \u2395CSV by Ad\u00e1m's APL \u2395JSON \u2395XML XML is a format that has fallen out of favour in recent years, but is still useful to be able to import and export it easily when you need to. \u2395R/\u2395S Search and replace using regular expressions. \u2395R and \u2395S are dyadic operators which allow searching text using Pearl Compatible Regular Expressions (PCRE). Dyalog's search and replace accept multiple search and replace strings and/or functions in a single call. \u2395MAP Full documentation for \u2395MAP . The memory mapping function \u2395MAP associates a file on disk with an APL array in the workspace. This is useful if you are working with data that cannot fit inside the available workspace memory. One approach might be to read the data in chunks and process one chunk at a time (for example, see the \"Records\" variant option for \u2395CSV ). Another approach is to use \u2395MAP . If you are working with data which is very large, you might not want or be able to bring all of the data into the workspace in order to process it. If you are reading large tabular data, \u2395CSV 's Records variant \u2360 option might be a convenient tool when used in combination with \u2395MAP . \u2395MAP allows you to treat a file on disk as if it were a variable in the workspace. text \u2190 80 \u00af1 \u2395MAP '/path/to/file.txt' You must specify the type according to the Data Representation \u2395DR of the data to be read. \u2395 JSON JSON is not only a convenient way to represent nested data structures, but also a convenient data representation for the modern web since it is natively handled by JavaScript. \u2395JSON converts between APL arrays, including namespaces and text vector representations of JSON . 'ns' \u2395NS \u236c ns . var \u2190 1 2 3 ns . char \u2190 'abc' \u2395JSON ns { \"char\" : \"abc\" , \"var\" : [ 1 , 2 , 3 ] } A JSON object in Dyalog uses dot-syntax to access members. Some JSON object keys are invalid APL names, so Dyalog works around this using special characters: ( \u2395JSON '{\"$name\": \"steve\", \"3var\": \"what\"}' ) . \u2395nl -\u2373 9 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u23593var \u2502 \u2359\u235936\u2359name \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Be aware of incompatible namespaces, although most of the time you will be converting data rather than namespaces. 'ns' \u2395NS \u236c ns . fn \u2190 { \u2375 } \u2395JSON ns DOMAIN ERROR : JSON export : item \"fn\" of the right argument cannot be converted ( \u2395IO = 1 ) \u2395JSON ns \u2227 Recall the expression for an empty JSON object . Using \u2395JSON , we can also display error information in a human-readable format . Component files If it is only APL systems that need to store data, the most convenient and efficient way to store that data is in APL component files. Component files can store any type of APL array, including namespaces. System functions that deal with component files begin \u2395F . Chapter N of Mastering Dyalog APL Component Files Online Documentation Chapter 5 of Dyalog Programming Reference Guide Downloading data from the internet See HttpCommand . SQL Interface SQAPL provides an interface to ODBC-compliant SQL databases including Oracle, Microsoft Access, MySQL, MariaDB and DB2. It contains functions to read, write and manage SQL databases. It is supported on all platforms, although some platforms could incur an additional licence fee for the server component of SQAPL. For more information about using SQAPL, see the SQL Interface Guide . For quick access to simply read data from or write data to a table, the functions LoadSQL and SaveSQL from the utility workspace LOADDATA may be all that you need. 'LoadSQL' 'SaveSQL' \u2395CY 'LOADDATA' LoadSQL 'NorthWind' 'products' Features Using SQAPL, you can: Retrieve a list of available data sources, and connect to one or more of them. Query the database catalogue, to determine which tables, views and columns exist in a data source. Retrieve data from a result set. Retrieve a description of the contents of a result set. Execute SQL statements multiple times using a matrix containing a row of data for each execution (known as Bulk Input). Commit or roll back transactions. If connected with sufficient privileges, execute any SQL statement supported by the database management system, including the creation of tables or views (Data Definition Language \u2013 or DDL), indexes, stored procedures, or GRANT statements (etc). Retrieve a list of data types supported by a data source. Getting Started SQAPL ships with Dyalog APL. Simply copy it into the active workspace and call SQA.Init with an empty argument to start using it: 'SQA' \u2395CY ' SQAPL SQA . Init \u236c Commonly used functions include: Function Purpose SQA.Connect Connect to a data source SQA.Tables Show available tables SQA.Columns See information about tables including column data types and widths SQA.Do Execute SQL statements supported by your database and driver","title":"File handling and data processing"},{"location":"file-handling-data-processing/#file-handling-and-data-processing","text":"Reading data into and getting data out of the workspace. There are some in-built tools for importing data from files and the internet. If you are already familiar with python , R language or .NET then you can use one of the external language bridges to bring data into APL from files via one of these languages. However, it will usually be simpler and faster in the long term to become familiar with the following tools.","title":"File handling and data processing"},{"location":"file-handling-data-processing/#binary-files-or-arbitrary-file-types","text":"The term \"Native Files\" refers to any type of file on a hard disk. These can be text or media files, or even executable files. Usually we are interested in various kinds of text files; the rest of this page lists system functions for handling these, including \u2395NGET . For files of arbitrary type and format, some system functions beginning \u2395N . First, we must tie the file, locking it from use by other applications. \u2395NTIE returns a tie number. tn \u2190 '/path/to/file' \u2395NTIE 0 This is a quick summary. For more details see the Native Files cheat sheet and system functions and variables A-Z in the online documentation. In the chapter on selecting from arrays there was an example of reading a text file using \u2395NGET . Before Dyalog version 15.0, reading text files required a couple of extra steps. Some \u2395N... native file functions are general and can be used to read and write any type of file. As a simple example, here we tie the file words.txt , read the data and store it in a variable, and finally untie the file. Note For multi-user systems, take care to set appropriate file access permissions when using \u2395NCREATE , \u2395NTIE and \u2395NLOCK . tn \u2190 'assets/words.txt' \u2395NTIE 0 \u2395 \u2190 10 \u2191 words \u2190 ( \u2395UCS 10 )( \u2260\u2286\u22a2 ) \u2395NREAD tn 82 ( \u2395NSIZE tn ) 0 \u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 A \u2502 A 's\u2502AA' s \u2502 AB 's\u2502ABM' s \u2502 AC 's\u2502ACTH' s \u2502 AI 's\u2502AIDS' s \u2502 AM ' s \u2502 \u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2395NUNTIE\u2395NNUMS","title":"Binary files or arbitrary file types"},{"location":"file-handling-data-processing/#text-files","text":"Generally the \u2395N... family of system functions are for reading and writing native files as described in the documentation. \u2395NGET and \u2395NPUT are useful for reading and writing text files without having to tie and untie them. ( \u2282 words ) \u2395NPUT 'data/words.txt' \u235d Write words to a unicode text file ( content encoding newline ) \u2190 \u2395NGET 'data/words.txt' \u235d Read words from a unicode text file words \u2190 ( \u2395UCS newline )(( ~\u220a \u2368 ) \u2286\u22a2 ) content \u235d Split words on each new line","title":"Text Files"},{"location":"file-handling-data-processing/#tabular-data","text":"For small amounts of data, it is usually quickest and easiest to use raw APL with arrays. Nested matrices offer a convenient format comparable to a spreadsheet (in fact, they can be directly imported from Excel or CSV files). Inverted tables take the idea of column store and implement them in APL for great search and retrieval performance.","title":"Tabular data"},{"location":"file-handling-data-processing/#csv","text":"The Comma Separator Values system function \u2395CSV can read tabular data from .csv files as APL matrices, Comma separated values are a very common and convenient . While we encourage you to read the documentation for a full description, here is an overview of features of \u2395CSV : Read data from and write data to files directly data \u2190 \u2395CSV '/path/to/file.csv' Separate the header (first row) from the rest of the data ( data header ) \u2190 \u2395CSV '/path/to/file.csv' \u236c \u236c 1 Treat specific columns of input as numeric or text, depending on the options provided. The 4 here indicates to convert numeric values if possible, else keep the value as text. numeric_if_possible \u2190 \u2395CSV '/path/to/file.csv' \u236c 4 Use a separator other than commas, using the \"Separator\" variant option, for example using tabs ( \u2395UCS 9 ) for Tab Separated Values (.tsv). tsv \u2190 \u2395CSV \u2360 'Separator' ( \u2395UCS 9 ) \u22a2 '/path/to/file.csv' Read data chunks at a time so as to not fill the workspace, using the \"Records\" variant option. Example path \u2190 '/path/to/file.csv' \u235d The file path as simple character vector ReadCSV10 \u2190 \u2395CSV \u2360 'Records' 10 \u235d A function to read CSV 10 records at a time tn \u2190 path \u2395NTIE 0 \u235d Tie the file - this locks it from use by other applications first10 \u2190 ReadCSV10 tn \u235d Read the first 10 records (rows) second10 \u2190 ReadCSV10 tn \u235d Read the next 10 \u2262 \u00a8 first10 second10 10 10 first10 second10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 1 \u2502 JQZUK \u2502\u2502\u2502 11 \u2502 DECJM \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 2 \u2502 ANPYW \u2502\u2502\u2502 12 \u2502 PXPGL \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 3 \u2502 WYVSR \u2502\u2502\u2502 13 \u2502 SYSCN \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 4 \u2502 ZOGOX \u2502\u2502\u2502 14 \u2502 EKDPS \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 5 \u2502 CXKRS \u2502\u2502\u2502 15 \u2502 XCOHA \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 6 \u2502 BFTYO \u2502\u2502\u2502 16 \u2502 RDAHR \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 7 \u2502 VFLAS \u2502\u2502\u2502 17 \u2502 KPUTW \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 8 \u2502 BAFYD \u2502\u2502\u2502 18 \u2502 TPDOD \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 9 \u2502 XPEBP \u2502\u2502\u2502 19 \u2502 BGIVA \u2502\u2502 \u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 10 \u2502 UVBFG \u2502\u2502\u2502 20 \u2502 IITSO \u2502\u2502 \u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2395NUNTIE tn \u235d Don't forget to untie the file after use! If you are reading large tabular data, you can use \u2395MAP to access the data without bringing it all into your workspace, potentially preventing a WS FULL error. Parsing content from text files using Dyalog APL's \u2395CSV by Ad\u00e1m's APL","title":"\u2395CSV"},{"location":"file-handling-data-processing/#json","text":"","title":"\u2395JSON"},{"location":"file-handling-data-processing/#xml","text":"XML is a format that has fallen out of favour in recent years, but is still useful to be able to import and export it easily when you need to.","title":"\u2395XML"},{"location":"file-handling-data-processing/#rs","text":"Search and replace using regular expressions. \u2395R and \u2395S are dyadic operators which allow searching text using Pearl Compatible Regular Expressions (PCRE). Dyalog's search and replace accept multiple search and replace strings and/or functions in a single call.","title":"\u2395R/\u2395S"},{"location":"file-handling-data-processing/#map","text":"Full documentation for \u2395MAP . The memory mapping function \u2395MAP associates a file on disk with an APL array in the workspace. This is useful if you are working with data that cannot fit inside the available workspace memory. One approach might be to read the data in chunks and process one chunk at a time (for example, see the \"Records\" variant option for \u2395CSV ). Another approach is to use \u2395MAP . If you are working with data which is very large, you might not want or be able to bring all of the data into the workspace in order to process it. If you are reading large tabular data, \u2395CSV 's Records variant \u2360 option might be a convenient tool when used in combination with \u2395MAP . \u2395MAP allows you to treat a file on disk as if it were a variable in the workspace. text \u2190 80 \u00af1 \u2395MAP '/path/to/file.txt' You must specify the type according to the Data Representation \u2395DR of the data to be read.","title":"\u2395MAP"},{"location":"file-handling-data-processing/#json_1","text":"JSON is not only a convenient way to represent nested data structures, but also a convenient data representation for the modern web since it is natively handled by JavaScript. \u2395JSON converts between APL arrays, including namespaces and text vector representations of JSON . 'ns' \u2395NS \u236c ns . var \u2190 1 2 3 ns . char \u2190 'abc' \u2395JSON ns { \"char\" : \"abc\" , \"var\" : [ 1 , 2 , 3 ] } A JSON object in Dyalog uses dot-syntax to access members. Some JSON object keys are invalid APL names, so Dyalog works around this using special characters: ( \u2395JSON '{\"$name\": \"steve\", \"3var\": \"what\"}' ) . \u2395nl -\u2373 9 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u23593var \u2502 \u2359\u235936\u2359name \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Be aware of incompatible namespaces, although most of the time you will be converting data rather than namespaces. 'ns' \u2395NS \u236c ns . fn \u2190 { \u2375 } \u2395JSON ns DOMAIN ERROR : JSON export : item \"fn\" of the right argument cannot be converted ( \u2395IO = 1 ) \u2395JSON ns \u2227 Recall the expression for an empty JSON object . Using \u2395JSON , we can also display error information in a human-readable format .","title":"\u2395JSON"},{"location":"file-handling-data-processing/#component-files","text":"If it is only APL systems that need to store data, the most convenient and efficient way to store that data is in APL component files. Component files can store any type of APL array, including namespaces. System functions that deal with component files begin \u2395F . Chapter N of Mastering Dyalog APL Component Files Online Documentation Chapter 5 of Dyalog Programming Reference Guide","title":"Component files"},{"location":"file-handling-data-processing/#downloading-data-from-the-internet","text":"See HttpCommand .","title":"Downloading data from the internet"},{"location":"file-handling-data-processing/#sql-interface","text":"SQAPL provides an interface to ODBC-compliant SQL databases including Oracle, Microsoft Access, MySQL, MariaDB and DB2. It contains functions to read, write and manage SQL databases. It is supported on all platforms, although some platforms could incur an additional licence fee for the server component of SQAPL. For more information about using SQAPL, see the SQL Interface Guide . For quick access to simply read data from or write data to a table, the functions LoadSQL and SaveSQL from the utility workspace LOADDATA may be all that you need. 'LoadSQL' 'SaveSQL' \u2395CY 'LOADDATA' LoadSQL 'NorthWind' 'products'","title":"SQL Interface"},{"location":"file-handling-data-processing/#features","text":"Using SQAPL, you can: Retrieve a list of available data sources, and connect to one or more of them. Query the database catalogue, to determine which tables, views and columns exist in a data source. Retrieve data from a result set. Retrieve a description of the contents of a result set. Execute SQL statements multiple times using a matrix containing a row of data for each execution (known as Bulk Input). Commit or roll back transactions. If connected with sufficient privileges, execute any SQL statement supported by the database management system, including the creation of tables or views (Data Definition Language \u2013 or DDL), indexes, stored procedures, or GRANT statements (etc). Retrieve a list of data types supported by a data source.","title":"Features"},{"location":"file-handling-data-processing/#getting-started","text":"SQAPL ships with Dyalog APL. Simply copy it into the active workspace and call SQA.Init with an empty argument to start using it: 'SQA' \u2395CY ' SQAPL SQA . Init \u236c Commonly used functions include: Function Purpose SQA.Connect Connect to a data source SQA.Tables Show available tables SQA.Columns See information about tables including column data types and widths SQA.Do Execute SQL statements supported by your database and driver","title":"Getting Started"},{"location":"web-communications/","text":"Web communications HttpCommand HttpCommand online documentation HttpCommand is a utility is designed to make it easy for the APL user to send requests to and receive responses from HTTP servers like web servers and web services. HttpCommand is included with Dyalog APL as a loadable utility. Below is a simple example of making a GET request to a web API: ] Get HttpCommand \u235d Use ]Load prior to Dyalog version 18.2 #.HttpCommand response \u2190 HttpCommand . Get 'https://catfact.ninja/fact' response . ( HttpStatus HttpMessage ) \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 200 \u2502 OK \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2518 response . Data { \"fact\" : \"In an average year, cat owners in the United States spend over $2 billion on cat food.\" , \"length\" : 86 } Jarvis Web Service Framework Jarvis online documentation Jarvis allows you to serve up a single APL function or an entire application, as a an HTTP/JSON or RESTful web service. Jarvis automatically converts payloads between JSON and APL arrays, can serve static HTTP resources and integrates WebSocket support with publish/subscribe capability. Jarvis can maintain application session state, with user validation based on HTTP Basic authentication, custom authentication, and/or client-side certificates. TCP Client and Server Library (Conga) Conga user guide Conga provides network communication capabilities for APL applications. Higher-level tools like Jarvis, MiServer, HttpCommand and FtpClient are all built upon Conga, which provides fundamental TCP client and server APIs, with optional web socket support. In addition to raw or text formats suitable for communication with non-APL peers, Conga provides a protocol layer that can transmit APL arrays in binary format between two APL interpreters running Conga. Conga embeds GnuTLS and supports secure and encrypted communications. APL client and server applications can require and validate peer certificate information. There is also support for Integrated Windows Authentication, enabling identification of users who already logged into a domain controller without re-entering credentials. APLSSH github.com/Dyalog/aplssh This is a wrapper around the libssh2 library. Currently, it only exposes a small fraction of its functionality. It can execute remote commands, and read and write files. Using Microsoft .NET Dyalog can be used with industry-standard Microsoft components in the same way as most other programming languages that integrate with Microsoft .NET: Dyalog can be used as an ASP.NET scripting language to build web pages under Microsoft IIS. SharePoint WebParts can be developed using Dyalog as a .NET programming language. Microsoft IIS can also serve up Web Services implemented in Dyalog. See chapters 6 through 9 of the Dyalog for Microsoft Windows .NET Interface Guide Dyalog can also be used to power web solutions more indirectly, by acting as a participant in message queuing systems like Windows Communications Foundation / MSMQ \u2013 or any tool that is based on Microsoft .NET. Conga TCP Wrapper Conga User Guide Provides wrappers for listening (server) and client sockets, which can, optionally, be made secure using TLS. Sockets can be used to transmit either raw byte streams or entire APL arrays from one process to another. Code samples are provided, showing how to build web servers and clients, a simple FTP client and server and an RPC framework.","title":"Web communications"},{"location":"web-communications/#web-communications","text":"","title":"Web communications"},{"location":"web-communications/#httpcommand","text":"HttpCommand online documentation HttpCommand is a utility is designed to make it easy for the APL user to send requests to and receive responses from HTTP servers like web servers and web services. HttpCommand is included with Dyalog APL as a loadable utility. Below is a simple example of making a GET request to a web API: ] Get HttpCommand \u235d Use ]Load prior to Dyalog version 18.2 #.HttpCommand response \u2190 HttpCommand . Get 'https://catfact.ninja/fact' response . ( HttpStatus HttpMessage ) \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 200 \u2502 OK \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2518 response . Data { \"fact\" : \"In an average year, cat owners in the United States spend over $2 billion on cat food.\" , \"length\" : 86 }","title":"HttpCommand"},{"location":"web-communications/#jarvis-web-service-framework","text":"Jarvis online documentation Jarvis allows you to serve up a single APL function or an entire application, as a an HTTP/JSON or RESTful web service. Jarvis automatically converts payloads between JSON and APL arrays, can serve static HTTP resources and integrates WebSocket support with publish/subscribe capability. Jarvis can maintain application session state, with user validation based on HTTP Basic authentication, custom authentication, and/or client-side certificates.","title":"Jarvis Web Service Framework"},{"location":"web-communications/#tcp-client-and-server-library-conga","text":"Conga user guide Conga provides network communication capabilities for APL applications. Higher-level tools like Jarvis, MiServer, HttpCommand and FtpClient are all built upon Conga, which provides fundamental TCP client and server APIs, with optional web socket support. In addition to raw or text formats suitable for communication with non-APL peers, Conga provides a protocol layer that can transmit APL arrays in binary format between two APL interpreters running Conga. Conga embeds GnuTLS and supports secure and encrypted communications. APL client and server applications can require and validate peer certificate information. There is also support for Integrated Windows Authentication, enabling identification of users who already logged into a domain controller without re-entering credentials.","title":"TCP Client and Server Library (Conga)"},{"location":"web-communications/#aplssh","text":"github.com/Dyalog/aplssh This is a wrapper around the libssh2 library. Currently, it only exposes a small fraction of its functionality. It can execute remote commands, and read and write files.","title":"APLSSH"},{"location":"web-communications/#using-microsoft-net","text":"Dyalog can be used with industry-standard Microsoft components in the same way as most other programming languages that integrate with Microsoft .NET: Dyalog can be used as an ASP.NET scripting language to build web pages under Microsoft IIS. SharePoint WebParts can be developed using Dyalog as a .NET programming language. Microsoft IIS can also serve up Web Services implemented in Dyalog. See chapters 6 through 9 of the Dyalog for Microsoft Windows .NET Interface Guide Dyalog can also be used to power web solutions more indirectly, by acting as a participant in message queuing systems like Windows Communications Foundation / MSMQ \u2013 or any tool that is based on Microsoft .NET.","title":"Using Microsoft .NET"},{"location":"web-communications/#conga-tcp-wrapper","text":"Conga User Guide Provides wrappers for listening (server) and client sockets, which can, optionally, be made secure using TLS. Sockets can be used to transmit either raw byte streams or entire APL arrays from one process to another. Code samples are provided, showing how to build web servers and clients, a simple FTP client and server and an RPC framework.","title":"Conga TCP Wrapper"}]}